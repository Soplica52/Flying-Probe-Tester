
Flying-Probe_tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cd8  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004ea0  08004ea0  00005ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ec8  08004ec8  00006160  2**0
                  CONTENTS
  4 .ARM          00000008  08004ec8  08004ec8  00005ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ed0  08004ed0  00006160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ed0  08004ed0  00005ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ed4  08004ed4  00005ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08004ed8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000020  08004ef8  00006020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000c0  08004f98  000060c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000720  20000160  08005038  00006160  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000880  08005038  00006880  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00006160  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001aaad  00000000  00000000  00006190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003122  00000000  00000000  00020c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015a8  00000000  00000000  00023d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010eb  00000000  00000000  00025308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000288e2  00000000  00000000  000263f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d288  00000000  00000000  0004ecd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f9a89  00000000  00000000  0006bf5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001659e6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005d24  00000000  00000000  00165a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006d  00000000  00000000  0016b750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000160 	.word	0x20000160
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004e88 	.word	0x08004e88

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000164 	.word	0x20000164
 8000204:	08004e88 	.word	0x08004e88

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <__lcd_delay_us>:
 * @param[in] htim     : LCD timer handler
 * @param[in] delay_us : Delay period in microseconds
 * @return None
 */
void __lcd_delay_us(LCD_TimerType htim, uint16_t delay_us)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(htim, 0);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2200      	movs	r2, #0
 800051a:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(htim);
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f003 fb49 	bl	8003bb4 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(htim) < delay_us);
 8000522:	bf00      	nop
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800052a:	887b      	ldrh	r3, [r7, #2]
 800052c:	429a      	cmp	r2, r3
 800052e:	d3f9      	bcc.n	8000524 <__lcd_delay_us+0x1c>
  HAL_TIM_Base_Stop(htim);
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f003 fbaf 	bl	8003c94 <HAL_TIM_Base_Stop>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <__lcd_i2c_write>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write(LCD_I2C_HandleTypeDef* hlcd, uint8_t rsRwBits, uint8_t data)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af02      	add	r7, sp, #8
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	460b      	mov	r3, r1
 800054a:	70fb      	strb	r3, [r7, #3]
 800054c:	4613      	mov	r3, r2
 800054e:	70bb      	strb	r3, [r7, #2]
    /* most significant nibble */
    __lcd_i2c_buffer[0] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000550:	78bb      	ldrb	r3, [r7, #2]
 8000552:	f023 030f 	bic.w	r3, r3, #15
 8000556:	b2da      	uxtb	r2, r3
 8000558:	78fb      	ldrb	r3, [r7, #3]
 800055a:	4313      	orrs	r3, r2
 800055c:	b2db      	uxtb	r3, r3
 800055e:	f043 030c 	orr.w	r3, r3, #12
 8000562:	b2da      	uxtb	r2, r3
 8000564:	4b21      	ldr	r3, [pc, #132]	@ (80005ec <__lcd_i2c_write+0xac>)
 8000566:	701a      	strb	r2, [r3, #0]
    __lcd_i2c_buffer[1] = __lcd_i2c_buffer[0];
 8000568:	4b20      	ldr	r3, [pc, #128]	@ (80005ec <__lcd_i2c_write+0xac>)
 800056a:	781a      	ldrb	r2, [r3, #0]
 800056c:	4b1f      	ldr	r3, [pc, #124]	@ (80005ec <__lcd_i2c_write+0xac>)
 800056e:	705a      	strb	r2, [r3, #1]
    __lcd_i2c_buffer[2] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000570:	78bb      	ldrb	r3, [r7, #2]
 8000572:	f023 030f 	bic.w	r3, r3, #15
 8000576:	b2da      	uxtb	r2, r3
 8000578:	78fb      	ldrb	r3, [r7, #3]
 800057a:	4313      	orrs	r3, r2
 800057c:	b2db      	uxtb	r3, r3
 800057e:	f043 0308 	orr.w	r3, r3, #8
 8000582:	b2da      	uxtb	r2, r3
 8000584:	4b19      	ldr	r3, [pc, #100]	@ (80005ec <__lcd_i2c_write+0xac>)
 8000586:	709a      	strb	r2, [r3, #2]

    /* least significant nibble */
    __lcd_i2c_buffer[3] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8000588:	78bb      	ldrb	r3, [r7, #2]
 800058a:	011b      	lsls	r3, r3, #4
 800058c:	b2da      	uxtb	r2, r3
 800058e:	78fb      	ldrb	r3, [r7, #3]
 8000590:	4313      	orrs	r3, r2
 8000592:	b2db      	uxtb	r3, r3
 8000594:	f043 030c 	orr.w	r3, r3, #12
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <__lcd_i2c_write+0xac>)
 800059c:	70da      	strb	r2, [r3, #3]
    __lcd_i2c_buffer[4] = __lcd_i2c_buffer[3];
 800059e:	4b13      	ldr	r3, [pc, #76]	@ (80005ec <__lcd_i2c_write+0xac>)
 80005a0:	78da      	ldrb	r2, [r3, #3]
 80005a2:	4b12      	ldr	r3, [pc, #72]	@ (80005ec <__lcd_i2c_write+0xac>)
 80005a4:	711a      	strb	r2, [r3, #4]
    __lcd_i2c_buffer[5] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 80005a6:	78bb      	ldrb	r3, [r7, #2]
 80005a8:	011b      	lsls	r3, r3, #4
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	78fb      	ldrb	r3, [r7, #3]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	f043 0308 	orr.w	r3, r3, #8
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <__lcd_i2c_write+0xac>)
 80005ba:	715a      	strb	r2, [r3, #5]

    HAL_I2C_Master_Transmit(hlcd->I2C, (hlcd->Address << 1), (uint8_t*)__lcd_i2c_buffer, 6, hlcd->Timeout);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	889b      	ldrh	r3, [r3, #4]
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	b299      	uxth	r1, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2306      	movs	r3, #6
 80005d0:	4a06      	ldr	r2, [pc, #24]	@ (80005ec <__lcd_i2c_write+0xac>)
 80005d2:	f001 fcc9 	bl	8001f68 <HAL_I2C_Master_Transmit>

    __lcd_delay(hlcd->Timer, 0.05);  // > 41 us
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	68db      	ldr	r3, [r3, #12]
 80005da:	2132      	movs	r1, #50	@ 0x32
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ff93 	bl	8000508 <__lcd_delay_us>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	2000017c 	.word	0x2000017c

080005f0 <__lcd_i2c_write_command>:
 * @param[in] hlcd    : LCD handler with I2C interface
 * @param[in] command : Display command @see lcd.h/Define
 * @return None
 */
void __lcd_i2c_write_command(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_COMMAND_REG, data);
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	461a      	mov	r2, r3
 8000600:	2100      	movs	r1, #0
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f7ff ff9c 	bl	8000540 <__lcd_i2c_write>
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <__lcd_i2c_write_data>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write_data(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_DATA_REG, data);
 800061c:	78fb      	ldrb	r3, [r7, #3]
 800061e:	461a      	mov	r2, r3
 8000620:	2101      	movs	r1, #1
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f7ff ff8c 	bl	8000540 <__lcd_i2c_write>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <LCD_I2C_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Init(LCD_I2C_HandleTypeDef* hlcd)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  __lcd_delay(hlcd->Timer, 15.2);  // >15 ms
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	f643 315f 	movw	r1, #15199	@ 0x3b5f
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff61 	bl	8000508 <__lcd_delay_us>

  // 4-bit mode
  __lcd_i2c_write_command(hlcd, 0x03);  // 0011
 8000646:	2103      	movs	r1, #3
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff ffd1 	bl	80005f0 <__lcd_i2c_write_command>
  __lcd_delay(hlcd->Timer, 4.1);        // > 4.1 ms
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	f241 0103 	movw	r1, #4099	@ 0x1003
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ff56 	bl	8000508 <__lcd_delay_us>
  __lcd_i2c_write_command(hlcd, 0x03);  // 0011
 800065c:	2103      	movs	r1, #3
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f7ff ffc6 	bl	80005f0 <__lcd_i2c_write_command>
  __lcd_delay(hlcd->Timer, 4.1);        // > 0.1 ms
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	f241 0103 	movw	r1, #4099	@ 0x1003
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ff4b 	bl	8000508 <__lcd_delay_us>
  __lcd_i2c_write_command(hlcd, 0x03);  // 0011
 8000672:	2103      	movs	r1, #3
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f7ff ffbb 	bl	80005f0 <__lcd_i2c_write_command>
  __lcd_i2c_write_command(hlcd, 0x02);  // 0001
 800067a:	2102      	movs	r1, #2
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff ffb7 	bl	80005f0 <__lcd_i2c_write_command>

  hlcd->IsInitialized = 1;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2201      	movs	r2, #1
 8000686:	741a      	strb	r2, [r3, #16]

  __lcd_i2c_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);
 8000688:	2128      	movs	r1, #40	@ 0x28
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f7ff ffb0 	bl	80005f0 <__lcd_i2c_write_command>

  __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);                      // Clear screen
 8000690:	2101      	movs	r1, #1
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff ffac 	bl	80005f0 <__lcd_i2c_write_command>
  __lcd_delay(hlcd->Timer, 1.6);                                         // > 1.52 ms
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff31 	bl	8000508 <__lcd_delay_us>
  __lcd_i2c_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D); // LCD on, Cursor off, On blink
 80006a6:	210c      	movs	r1, #12
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f7ff ffa1 	bl	80005f0 <__lcd_i2c_write_command>
  __lcd_i2c_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);       // Cursor increment on
 80006ae:	2106      	movs	r1, #6
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f7ff ff9d 	bl	80005f0 <__lcd_i2c_write_command>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <LCD_I2C_printStr>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] str  : Null-terminated string
 * @return None
 */
void LCD_I2C_printStr(LCD_I2C_HandleTypeDef* hlcd, char* str)
{
 80006be:	b590      	push	{r4, r7, lr}
 80006c0:	b085      	sub	sp, #20
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
 80006c6:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	73fb      	strb	r3, [r7, #15]
 80006cc:	e00a      	b.n	80006e4 <LCD_I2C_printStr+0x26>
    __lcd_i2c_write_data(hlcd, str[i]);
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	4413      	add	r3, r2
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	4619      	mov	r1, r3
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ff99 	bl	8000610 <__lcd_i2c_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	3301      	adds	r3, #1
 80006e2:	73fb      	strb	r3, [r7, #15]
 80006e4:	7bfc      	ldrb	r4, [r7, #15]
 80006e6:	6838      	ldr	r0, [r7, #0]
 80006e8:	f7ff fd8e 	bl	8000208 <strlen>
 80006ec:	4603      	mov	r3, r0
 80006ee:	429c      	cmp	r4, r3
 80006f0:	d3ed      	bcc.n	80006ce <LCD_I2C_printStr+0x10>
}
 80006f2:	bf00      	nop
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd90      	pop	{r4, r7, pc}

080006fc <LCD_I2C_SetCursor>:
 * @param[in] row  : Display row (line): 0 to N
 * @param[in] col  : Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_I2C_SetCursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	70fb      	strb	r3, [r7, #3]
 8000708:	4613      	mov	r3, r2
 800070a:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 800070c:	78fb      	ldrb	r3, [r7, #3]
 800070e:	4a07      	ldr	r2, [pc, #28]	@ (800072c <LCD_I2C_SetCursor+0x30>)
 8000710:	5cd2      	ldrb	r2, [r2, r3]
 8000712:	78bb      	ldrb	r3, [r7, #2]
 8000714:	4413      	add	r3, r2
 8000716:	b2db      	uxtb	r3, r3
 8000718:	3b80      	subs	r3, #128	@ 0x80
 800071a:	b2db      	uxtb	r3, r3
 800071c:	4619      	mov	r1, r3
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f7ff ff66 	bl	80005f0 <__lcd_i2c_write_command>
  #endif
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	08004eac 	.word	0x08004eac

08000730 <HAL_I2C_MspInit>:
  /* USER CODE END I2C1_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b0aa      	sub	sp, #168	@ 0xa8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000748:	f107 0310 	add.w	r3, r7, #16
 800074c:	2284      	movs	r2, #132	@ 0x84
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f004 fb6c 	bl	8004e2e <memset>
  if(i2cHandle->Instance==I2C1)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a22      	ldr	r2, [pc, #136]	@ (80007e4 <HAL_I2C_MspInit+0xb4>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d13c      	bne.n	80007da <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000760:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000764:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000766:	2300      	movs	r3, #0
 8000768:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	4618      	mov	r0, r3
 8000770:	f002 fdd8 	bl	8003324 <HAL_RCCEx_PeriphCLKConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800077a:	f000 fa97 	bl	8000cac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <HAL_I2C_MspInit+0xb8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a19      	ldr	r2, [pc, #100]	@ (80007e8 <HAL_I2C_MspInit+0xb8>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <HAL_I2C_MspInit+0xb8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000796:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800079a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800079e:	2312      	movs	r3, #18
 80007a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007aa:	2303      	movs	r3, #3
 80007ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007b0:	2304      	movs	r3, #4
 80007b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80007ba:	4619      	mov	r1, r3
 80007bc:	480b      	ldr	r0, [pc, #44]	@ (80007ec <HAL_I2C_MspInit+0xbc>)
 80007be:	f001 f971 	bl	8001aa4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007c2:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <HAL_I2C_MspInit+0xb8>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c6:	4a08      	ldr	r2, [pc, #32]	@ (80007e8 <HAL_I2C_MspInit+0xb8>)
 80007c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <HAL_I2C_MspInit+0xb8>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007da:	bf00      	nop
 80007dc:	37a8      	adds	r7, #168	@ 0xa8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40005400 	.word	0x40005400
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020400 	.word	0x40020400

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f4:	f000 fca1 	bl	800113a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f8:	f000 f81e 	bl	8000838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fc:	f000 f9a6 	bl	8000b4c <MX_GPIO_Init>
  MX_ETH_Init();
 8000800:	f000 f882 	bl	8000908 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000804:	f000 f944 	bl	8000a90 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000808:	f000 f972 	bl	8000af0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 800080c:	f000 f90a 	bl	8000a24 <MX_TIM7_Init>
  MX_I2C1_Init();
 8000810:	f000 f8c8 	bl	80009a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
   LCD_I2C_Init(&hlcd3);
 8000814:	4806      	ldr	r0, [pc, #24]	@ (8000830 <main+0x40>)
 8000816:	f7ff ff0b 	bl	8000630 <LCD_I2C_Init>
   LCD_I2C_SetCursor(&hlcd3, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	4804      	ldr	r0, [pc, #16]	@ (8000830 <main+0x40>)
 8000820:	f7ff ff6c 	bl	80006fc <LCD_I2C_SetCursor>
   LCD_I2C_printStr(&hlcd3, "Position: ");    //Display "Position:" in the first row
 8000824:	4903      	ldr	r1, [pc, #12]	@ (8000834 <main+0x44>)
 8000826:	4802      	ldr	r0, [pc, #8]	@ (8000830 <main+0x40>)
 8000828:	f7ff ff49 	bl	80006be <LCD_I2C_printStr>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <main+0x3c>
 8000830:	20000000 	.word	0x20000000
 8000834:	08004ea0 	.word	0x08004ea0

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b094      	sub	sp, #80	@ 0x50
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 0320 	add.w	r3, r7, #32
 8000842:	2230      	movs	r2, #48	@ 0x30
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f004 faf1 	bl	8004e2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800085c:	f002 f888 	bl	8002970 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000860:	4b27      	ldr	r3, [pc, #156]	@ (8000900 <SystemClock_Config+0xc8>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000864:	4a26      	ldr	r2, [pc, #152]	@ (8000900 <SystemClock_Config+0xc8>)
 8000866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800086a:	6413      	str	r3, [r2, #64]	@ 0x40
 800086c:	4b24      	ldr	r3, [pc, #144]	@ (8000900 <SystemClock_Config+0xc8>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000878:	4b22      	ldr	r3, [pc, #136]	@ (8000904 <SystemClock_Config+0xcc>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000880:	4a20      	ldr	r2, [pc, #128]	@ (8000904 <SystemClock_Config+0xcc>)
 8000882:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	4b1e      	ldr	r3, [pc, #120]	@ (8000904 <SystemClock_Config+0xcc>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000894:	2301      	movs	r3, #1
 8000896:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000898:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089e:	2302      	movs	r3, #2
 80008a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008a8:	2304      	movs	r3, #4
 80008aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80008ac:	2348      	movs	r3, #72	@ 0x48
 80008ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008b4:	2303      	movs	r3, #3
 80008b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 0320 	add.w	r3, r7, #32
 80008bc:	4618      	mov	r0, r3
 80008be:	f002 f867 	bl	8002990 <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008c8:	f000 f9f0 	bl	8000cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008cc:	230f      	movs	r3, #15
 80008ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d0:	2302      	movs	r3, #2
 80008d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	2102      	movs	r1, #2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f002 faf5 	bl	8002ed8 <HAL_RCC_ClockConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008f4:	f000 f9da 	bl	8000cac <Error_Handler>
  }
}
 80008f8:	bf00      	nop
 80008fa:	3750      	adds	r7, #80	@ 0x50
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40023800 	.word	0x40023800
 8000904:	40007000 	.word	0x40007000

08000908 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800090c:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <MX_ETH_Init+0x84>)
 800090e:	4a20      	ldr	r2, [pc, #128]	@ (8000990 <MX_ETH_Init+0x88>)
 8000910:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000912:	4b20      	ldr	r3, [pc, #128]	@ (8000994 <MX_ETH_Init+0x8c>)
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000918:	4b1e      	ldr	r3, [pc, #120]	@ (8000994 <MX_ETH_Init+0x8c>)
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800091e:	4b1d      	ldr	r3, [pc, #116]	@ (8000994 <MX_ETH_Init+0x8c>)
 8000920:	22e1      	movs	r2, #225	@ 0xe1
 8000922:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000924:	4b1b      	ldr	r3, [pc, #108]	@ (8000994 <MX_ETH_Init+0x8c>)
 8000926:	2200      	movs	r2, #0
 8000928:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800092a:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <MX_ETH_Init+0x8c>)
 800092c:	2200      	movs	r2, #0
 800092e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000930:	4b18      	ldr	r3, [pc, #96]	@ (8000994 <MX_ETH_Init+0x8c>)
 8000932:	2200      	movs	r2, #0
 8000934:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000936:	4b15      	ldr	r3, [pc, #84]	@ (800098c <MX_ETH_Init+0x84>)
 8000938:	4a16      	ldr	r2, [pc, #88]	@ (8000994 <MX_ETH_Init+0x8c>)
 800093a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800093c:	4b13      	ldr	r3, [pc, #76]	@ (800098c <MX_ETH_Init+0x84>)
 800093e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000942:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000944:	4b11      	ldr	r3, [pc, #68]	@ (800098c <MX_ETH_Init+0x84>)
 8000946:	4a14      	ldr	r2, [pc, #80]	@ (8000998 <MX_ETH_Init+0x90>)
 8000948:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800094a:	4b10      	ldr	r3, [pc, #64]	@ (800098c <MX_ETH_Init+0x84>)
 800094c:	4a13      	ldr	r2, [pc, #76]	@ (800099c <MX_ETH_Init+0x94>)
 800094e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000950:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <MX_ETH_Init+0x84>)
 8000952:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000956:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000958:	480c      	ldr	r0, [pc, #48]	@ (800098c <MX_ETH_Init+0x84>)
 800095a:	f000 fd55 	bl	8001408 <HAL_ETH_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000964:	f000 f9a2 	bl	8000cac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000968:	2238      	movs	r2, #56	@ 0x38
 800096a:	2100      	movs	r1, #0
 800096c:	480c      	ldr	r0, [pc, #48]	@ (80009a0 <MX_ETH_Init+0x98>)
 800096e:	f004 fa5e 	bl	8004e2e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <MX_ETH_Init+0x98>)
 8000974:	2221      	movs	r2, #33	@ 0x21
 8000976:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000978:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <MX_ETH_Init+0x98>)
 800097a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800097e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000980:	4b07      	ldr	r3, [pc, #28]	@ (80009a0 <MX_ETH_Init+0x98>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200001bc 	.word	0x200001bc
 8000990:	40028000 	.word	0x40028000
 8000994:	20000874 	.word	0x20000874
 8000998:	200000c0 	.word	0x200000c0
 800099c:	20000020 	.word	0x20000020
 80009a0:	20000184 	.word	0x20000184

080009a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a18 <MX_I2C1_Init+0x74>)
 80009aa:	4a1c      	ldr	r2, [pc, #112]	@ (8000a1c <MX_I2C1_Init+0x78>)
 80009ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <MX_I2C1_Init+0x74>)
 80009b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a20 <MX_I2C1_Init+0x7c>)
 80009b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009b4:	4b18      	ldr	r3, [pc, #96]	@ (8000a18 <MX_I2C1_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ba:	4b17      	ldr	r3, [pc, #92]	@ (8000a18 <MX_I2C1_Init+0x74>)
 80009bc:	2201      	movs	r2, #1
 80009be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c0:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009c6:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <MX_I2C1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <MX_I2C1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <MX_I2C1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009de:	480e      	ldr	r0, [pc, #56]	@ (8000a18 <MX_I2C1_Init+0x74>)
 80009e0:	f001 fa26 	bl	8001e30 <HAL_I2C_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ea:	f000 f95f 	bl	8000cac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ee:	2100      	movs	r1, #0
 80009f0:	4809      	ldr	r0, [pc, #36]	@ (8000a18 <MX_I2C1_Init+0x74>)
 80009f2:	f001 fdeb 	bl	80025cc <HAL_I2CEx_ConfigAnalogFilter>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009fc:	f000 f956 	bl	8000cac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a00:	2100      	movs	r1, #0
 8000a02:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <MX_I2C1_Init+0x74>)
 8000a04:	f001 fe2d 	bl	8002662 <HAL_I2CEx_ConfigDigitalFilter>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a0e:	f000 f94d 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000026c 	.word	0x2000026c
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	00808cd2 	.word	0x00808cd2

08000a24 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000a34:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <MX_TIM7_Init+0x64>)
 8000a36:	4a15      	ldr	r2, [pc, #84]	@ (8000a8c <MX_TIM7_Init+0x68>)
 8000a38:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 215;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <MX_TIM7_Init+0x64>)
 8000a3c:	22d7      	movs	r2, #215	@ 0xd7
 8000a3e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a40:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_TIM7_Init+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000a46:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <MX_TIM7_Init+0x64>)
 8000a48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a4c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <MX_TIM7_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000a54:	480c      	ldr	r0, [pc, #48]	@ (8000a88 <MX_TIM7_Init+0x64>)
 8000a56:	f003 f855 	bl	8003b04 <HAL_TIM_Base_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000a60:	f000 f924 	bl	8000cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <MX_TIM7_Init+0x64>)
 8000a72:	f003 f9e3 	bl	8003e3c <HAL_TIMEx_MasterConfigSynchronization>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000a7c:	f000 f916 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200002c0 	.word	0x200002c0
 8000a8c:	40001400 	.word	0x40001400

08000a90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a94:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000a96:	4a15      	ldr	r2, [pc, #84]	@ (8000aec <MX_USART3_UART_Init+0x5c>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000ad4:	f003 fa40 	bl	8003f58 <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ade:	f000 f8e5 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000030c 	.word	0x2000030c
 8000aec:	40004800 	.word	0x40004800

08000af0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000af4:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000afa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000afe:	2206      	movs	r2, #6
 8000b00:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b04:	2202      	movs	r2, #2
 8000b06:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b10:	2202      	movs	r2, #2
 8000b12:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b20:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b34:	f001 fde1 	bl	80026fa <HAL_PCD_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b3e:	f000 f8b5 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000394 	.word	0x20000394

08000b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08c      	sub	sp, #48	@ 0x30
 8000b50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	4b4d      	ldr	r3, [pc, #308]	@ (8000c98 <MX_GPIO_Init+0x14c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a4c      	ldr	r2, [pc, #304]	@ (8000c98 <MX_GPIO_Init+0x14c>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b4a      	ldr	r3, [pc, #296]	@ (8000c98 <MX_GPIO_Init+0x14c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	61bb      	str	r3, [r7, #24]
 8000b78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7a:	4b47      	ldr	r3, [pc, #284]	@ (8000c98 <MX_GPIO_Init+0x14c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a46      	ldr	r2, [pc, #280]	@ (8000c98 <MX_GPIO_Init+0x14c>)
 8000b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b44      	ldr	r3, [pc, #272]	@ (8000c98 <MX_GPIO_Init+0x14c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b41      	ldr	r3, [pc, #260]	@ (8000c98 <MX_GPIO_Init+0x14c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a40      	ldr	r2, [pc, #256]	@ (8000c98 <MX_GPIO_Init+0x14c>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c98 <MX_GPIO_Init+0x14c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	4b3b      	ldr	r3, [pc, #236]	@ (8000c98 <MX_GPIO_Init+0x14c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a3a      	ldr	r2, [pc, #232]	@ (8000c98 <MX_GPIO_Init+0x14c>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb6:	4b38      	ldr	r3, [pc, #224]	@ (8000c98 <MX_GPIO_Init+0x14c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc2:	4b35      	ldr	r3, [pc, #212]	@ (8000c98 <MX_GPIO_Init+0x14c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a34      	ldr	r2, [pc, #208]	@ (8000c98 <MX_GPIO_Init+0x14c>)
 8000bc8:	f043 0308 	orr.w	r3, r3, #8
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b32      	ldr	r3, [pc, #200]	@ (8000c98 <MX_GPIO_Init+0x14c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0308 	and.w	r3, r3, #8
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bda:	4b2f      	ldr	r3, [pc, #188]	@ (8000c98 <MX_GPIO_Init+0x14c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a2e      	ldr	r2, [pc, #184]	@ (8000c98 <MX_GPIO_Init+0x14c>)
 8000be0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b2c      	ldr	r3, [pc, #176]	@ (8000c98 <MX_GPIO_Init+0x14c>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000bf8:	4828      	ldr	r0, [pc, #160]	@ (8000c9c <MX_GPIO_Init+0x150>)
 8000bfa:	f001 f8ff 	bl	8001dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2140      	movs	r1, #64	@ 0x40
 8000c02:	4827      	ldr	r0, [pc, #156]	@ (8000ca0 <MX_GPIO_Init+0x154>)
 8000c04:	f001 f8fa 	bl	8001dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c0e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4821      	ldr	r0, [pc, #132]	@ (8000ca4 <MX_GPIO_Init+0x158>)
 8000c20:	f000 ff40 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c24:	2308      	movs	r3, #8
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	4619      	mov	r1, r3
 8000c36:	481c      	ldr	r0, [pc, #112]	@ (8000ca8 <MX_GPIO_Init+0x15c>)
 8000c38:	f000 ff34 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c3c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	4811      	ldr	r0, [pc, #68]	@ (8000c9c <MX_GPIO_Init+0x150>)
 8000c56:	f000 ff25 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c5a:	2340      	movs	r3, #64	@ 0x40
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480b      	ldr	r0, [pc, #44]	@ (8000ca0 <MX_GPIO_Init+0x154>)
 8000c72:	f000 ff17 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c76:	2380      	movs	r3, #128	@ 0x80
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <MX_GPIO_Init+0x154>)
 8000c8a:	f000 ff0b 	bl	8001aa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c8e:	bf00      	nop
 8000c90:	3730      	adds	r7, #48	@ 0x30
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020400 	.word	0x40020400
 8000ca0:	40021800 	.word	0x40021800
 8000ca4:	40020800 	.word	0x40020800
 8000ca8:	40020000 	.word	0x40020000

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <Error_Handler+0x8>

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <HAL_MspInit+0x44>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000cfc <HAL_MspInit+0x44>)
 8000cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <HAL_MspInit+0x44>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <HAL_MspInit+0x44>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cda:	4a08      	ldr	r2, [pc, #32]	@ (8000cfc <HAL_MspInit+0x44>)
 8000cdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_MspInit+0x44>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800

08000d00 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08e      	sub	sp, #56	@ 0x38
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a4e      	ldr	r2, [pc, #312]	@ (8000e58 <HAL_ETH_MspInit+0x158>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	f040 8096 	bne.w	8000e50 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d24:	4b4d      	ldr	r3, [pc, #308]	@ (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d28:	4a4c      	ldr	r2, [pc, #304]	@ (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d30:	4b4a      	ldr	r3, [pc, #296]	@ (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d38:	623b      	str	r3, [r7, #32]
 8000d3a:	6a3b      	ldr	r3, [r7, #32]
 8000d3c:	4b47      	ldr	r3, [pc, #284]	@ (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d40:	4a46      	ldr	r2, [pc, #280]	@ (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d48:	4b44      	ldr	r3, [pc, #272]	@ (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d50:	61fb      	str	r3, [r7, #28]
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	4b41      	ldr	r3, [pc, #260]	@ (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d58:	4a40      	ldr	r2, [pc, #256]	@ (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000d5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d60:	4b3e      	ldr	r3, [pc, #248]	@ (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000d68:	61bb      	str	r3, [r7, #24]
 8000d6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d70:	4a3a      	ldr	r2, [pc, #232]	@ (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d78:	4b38      	ldr	r3, [pc, #224]	@ (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	4b35      	ldr	r3, [pc, #212]	@ (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d88:	4a34      	ldr	r2, [pc, #208]	@ (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d90:	4b32      	ldr	r3, [pc, #200]	@ (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da0:	4a2e      	ldr	r2, [pc, #184]	@ (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000da2:	f043 0302 	orr.w	r3, r3, #2
 8000da6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000db4:	4b29      	ldr	r3, [pc, #164]	@ (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db8:	4a28      	ldr	r2, [pc, #160]	@ (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000dba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc0:	4b26      	ldr	r3, [pc, #152]	@ (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dcc:	2332      	movs	r3, #50	@ 0x32
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ddc:	230b      	movs	r3, #11
 8000dde:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	481e      	ldr	r0, [pc, #120]	@ (8000e60 <HAL_ETH_MspInit+0x160>)
 8000de8:	f000 fe5c 	bl	8001aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000dec:	2386      	movs	r3, #134	@ 0x86
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dfc:	230b      	movs	r3, #11
 8000dfe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	4817      	ldr	r0, [pc, #92]	@ (8000e64 <HAL_ETH_MspInit+0x164>)
 8000e08:	f000 fe4c 	bl	8001aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e1e:	230b      	movs	r3, #11
 8000e20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	480f      	ldr	r0, [pc, #60]	@ (8000e68 <HAL_ETH_MspInit+0x168>)
 8000e2a:	f000 fe3b 	bl	8001aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e2e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e40:	230b      	movs	r3, #11
 8000e42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4808      	ldr	r0, [pc, #32]	@ (8000e6c <HAL_ETH_MspInit+0x16c>)
 8000e4c:	f000 fe2a 	bl	8001aa4 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000e50:	bf00      	nop
 8000e52:	3738      	adds	r7, #56	@ 0x38
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40028000 	.word	0x40028000
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020800 	.word	0x40020800
 8000e64:	40020000 	.word	0x40020000
 8000e68:	40020400 	.word	0x40020400
 8000e6c:	40021800 	.word	0x40021800

08000e70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <HAL_TIM_Base_MspInit+0x38>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d10b      	bne.n	8000e9a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e82:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <HAL_TIM_Base_MspInit+0x3c>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	4a09      	ldr	r2, [pc, #36]	@ (8000eac <HAL_TIM_Base_MspInit+0x3c>)
 8000e88:	f043 0320 	orr.w	r3, r3, #32
 8000e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e8e:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <HAL_TIM_Base_MspInit+0x3c>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	f003 0320 	and.w	r3, r3, #32
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40001400 	.word	0x40001400
 8000eac:	40023800 	.word	0x40023800

08000eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b0aa      	sub	sp, #168	@ 0xa8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	2284      	movs	r2, #132	@ 0x84
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f003 ffac 	bl	8004e2e <memset>
  if(huart->Instance==USART3)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a22      	ldr	r2, [pc, #136]	@ (8000f64 <HAL_UART_MspInit+0xb4>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d13c      	bne.n	8000f5a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ee0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ee4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 fa18 	bl	8003324 <HAL_RCCEx_PeriphCLKConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000efa:	f7ff fed7 	bl	8000cac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000efe:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <HAL_UART_MspInit+0xb8>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	4a19      	ldr	r2, [pc, #100]	@ (8000f68 <HAL_UART_MspInit+0xb8>)
 8000f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0a:	4b17      	ldr	r3, [pc, #92]	@ (8000f68 <HAL_UART_MspInit+0xb8>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f16:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <HAL_UART_MspInit+0xb8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a13      	ldr	r2, [pc, #76]	@ (8000f68 <HAL_UART_MspInit+0xb8>)
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <HAL_UART_MspInit+0xb8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f2e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f48:	2307      	movs	r3, #7
 8000f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f4e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000f52:	4619      	mov	r1, r3
 8000f54:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <HAL_UART_MspInit+0xbc>)
 8000f56:	f000 fda5 	bl	8001aa4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000f5a:	bf00      	nop
 8000f5c:	37a8      	adds	r7, #168	@ 0xa8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40004800 	.word	0x40004800
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020c00 	.word	0x40020c00

08000f70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b0ac      	sub	sp, #176	@ 0xb0
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f88:	f107 0318 	add.w	r3, r7, #24
 8000f8c:	2284      	movs	r2, #132	@ 0x84
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f003 ff4c 	bl	8004e2e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f9e:	d159      	bne.n	8001054 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000fa0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000fa4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fac:	f107 0318 	add.w	r3, r7, #24
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f002 f9b7 	bl	8003324 <HAL_RCCEx_PeriphCLKConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000fbc:	f7ff fe76 	bl	8000cac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc0:	4b26      	ldr	r3, [pc, #152]	@ (800105c <HAL_PCD_MspInit+0xec>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc4:	4a25      	ldr	r2, [pc, #148]	@ (800105c <HAL_PCD_MspInit+0xec>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fcc:	4b23      	ldr	r3, [pc, #140]	@ (800105c <HAL_PCD_MspInit+0xec>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fd8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000fdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ff2:	230a      	movs	r3, #10
 8000ff4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4818      	ldr	r0, [pc, #96]	@ (8001060 <HAL_PCD_MspInit+0xf0>)
 8001000:	f000 fd50 	bl	8001aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001004:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001008:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800101c:	4619      	mov	r1, r3
 800101e:	4810      	ldr	r0, [pc, #64]	@ (8001060 <HAL_PCD_MspInit+0xf0>)
 8001020:	f000 fd40 	bl	8001aa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001024:	4b0d      	ldr	r3, [pc, #52]	@ (800105c <HAL_PCD_MspInit+0xec>)
 8001026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001028:	4a0c      	ldr	r2, [pc, #48]	@ (800105c <HAL_PCD_MspInit+0xec>)
 800102a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800102e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001030:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <HAL_PCD_MspInit+0xec>)
 8001032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4b07      	ldr	r3, [pc, #28]	@ (800105c <HAL_PCD_MspInit+0xec>)
 800103e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001040:	4a06      	ldr	r2, [pc, #24]	@ (800105c <HAL_PCD_MspInit+0xec>)
 8001042:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001046:	6453      	str	r3, [r2, #68]	@ 0x44
 8001048:	4b04      	ldr	r3, [pc, #16]	@ (800105c <HAL_PCD_MspInit+0xec>)
 800104a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001054:	bf00      	nop
 8001056:	37b0      	adds	r7, #176	@ 0xb0
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40020000 	.word	0x40020000

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <NMI_Handler+0x4>

0800106c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <MemManage_Handler+0x4>

0800107c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <UsageFault_Handler+0x4>

0800108c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ba:	f000 f87b 	bl	80011b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c8:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <SystemInit+0x20>)
 80010ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ce:	4a05      	ldr	r2, [pc, #20]	@ (80010e4 <SystemInit+0x20>)
 80010d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001120 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ec:	f7ff ffea 	bl	80010c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010f0:	480c      	ldr	r0, [pc, #48]	@ (8001124 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010f2:	490d      	ldr	r1, [pc, #52]	@ (8001128 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010f4:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f8:	e002      	b.n	8001100 <LoopCopyDataInit>

080010fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fe:	3304      	adds	r3, #4

08001100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001104:	d3f9      	bcc.n	80010fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001106:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001108:	4c0a      	ldr	r4, [pc, #40]	@ (8001134 <LoopFillZerobss+0x22>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800110c:	e001      	b.n	8001112 <LoopFillZerobss>

0800110e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001110:	3204      	adds	r2, #4

08001112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001114:	d3fb      	bcc.n	800110e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001116:	f003 fe93 	bl	8004e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111a:	f7ff fb69 	bl	80007f0 <main>
  bx  lr    
 800111e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001120:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001128:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800112c:	08004ed8 	.word	0x08004ed8
  ldr r2, =_sbss
 8001130:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8001134:	20000880 	.word	0x20000880

08001138 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC_IRQHandler>

0800113a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113e:	2003      	movs	r0, #3
 8001140:	f000 f92e 	bl	80013a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001144:	2000      	movs	r0, #0
 8001146:	f000 f805 	bl	8001154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800114a:	f7ff fdb5 	bl	8000cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800115c:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <HAL_InitTick+0x54>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <HAL_InitTick+0x58>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116a:	fbb3 f3f1 	udiv	r3, r3, r1
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f93b 	bl	80013ee <HAL_SYSTICK_Config>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e00e      	b.n	80011a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b0f      	cmp	r3, #15
 8001186:	d80a      	bhi.n	800119e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001188:	2200      	movs	r2, #0
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f000 f911 	bl	80013b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001194:	4a06      	ldr	r2, [pc, #24]	@ (80011b0 <HAL_InitTick+0x5c>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	e000      	b.n	80011a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000014 	.word	0x20000014
 80011ac:	2000001c 	.word	0x2000001c
 80011b0:	20000018 	.word	0x20000018

080011b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <HAL_IncTick+0x20>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <HAL_IncTick+0x24>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a04      	ldr	r2, [pc, #16]	@ (80011d8 <HAL_IncTick+0x24>)
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	2000001c 	.word	0x2000001c
 80011d8:	2000087c 	.word	0x2000087c

080011dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return uwTick;
 80011e0:	4b03      	ldr	r3, [pc, #12]	@ (80011f0 <HAL_GetTick+0x14>)
 80011e2:	681b      	ldr	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	2000087c 	.word	0x2000087c

080011f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011fc:	f7ff ffee 	bl	80011dc <HAL_GetTick>
 8001200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800120c:	d005      	beq.n	800121a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800120e:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <HAL_Delay+0x44>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800121a:	bf00      	nop
 800121c:	f7ff ffde 	bl	80011dc <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	429a      	cmp	r2, r3
 800122a:	d8f7      	bhi.n	800121c <HAL_Delay+0x28>
  {
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	2000001c 	.word	0x2000001c

0800123c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800124c:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <__NVIC_SetPriorityGrouping+0x40>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001258:	4013      	ands	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 8001266:	4313      	orrs	r3, r2
 8001268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126a:	4a04      	ldr	r2, [pc, #16]	@ (800127c <__NVIC_SetPriorityGrouping+0x40>)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	60d3      	str	r3, [r2, #12]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00
 8001280:	05fa0000 	.word	0x05fa0000

08001284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001288:	4b04      	ldr	r3, [pc, #16]	@ (800129c <__NVIC_GetPriorityGrouping+0x18>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	f003 0307 	and.w	r3, r3, #7
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	@ (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	@ (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	@ 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	@ 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800136c:	d301      	bcc.n	8001372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136e:	2301      	movs	r3, #1
 8001370:	e00f      	b.n	8001392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001372:	4a0a      	ldr	r2, [pc, #40]	@ (800139c <SysTick_Config+0x40>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137a:	210f      	movs	r1, #15
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f7ff ff8e 	bl	80012a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001384:	4b05      	ldr	r3, [pc, #20]	@ (800139c <SysTick_Config+0x40>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138a:	4b04      	ldr	r3, [pc, #16]	@ (800139c <SysTick_Config+0x40>)
 800138c:	2207      	movs	r2, #7
 800138e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	e000e010 	.word	0xe000e010

080013a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ff47 	bl	800123c <__NVIC_SetPriorityGrouping>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b086      	sub	sp, #24
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c8:	f7ff ff5c 	bl	8001284 <__NVIC_GetPriorityGrouping>
 80013cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	6978      	ldr	r0, [r7, #20]
 80013d4:	f7ff ff8e 	bl	80012f4 <NVIC_EncodePriority>
 80013d8:	4602      	mov	r2, r0
 80013da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff5d 	bl	80012a0 <__NVIC_SetPriority>
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffb0 	bl	800135c <SysTick_Config>
 80013fc:	4603      	mov	r3, r0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e086      	b.n	8001528 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001420:	2b00      	cmp	r3, #0
 8001422:	d106      	bne.n	8001432 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2223      	movs	r2, #35	@ 0x23
 8001428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff fc67 	bl	8000d00 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	4b3f      	ldr	r3, [pc, #252]	@ (8001530 <HAL_ETH_Init+0x128>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001436:	4a3e      	ldr	r2, [pc, #248]	@ (8001530 <HAL_ETH_Init+0x128>)
 8001438:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800143c:	6453      	str	r3, [r2, #68]	@ 0x44
 800143e:	4b3c      	ldr	r3, [pc, #240]	@ (8001530 <HAL_ETH_Init+0x128>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001442:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800144a:	4b3a      	ldr	r3, [pc, #232]	@ (8001534 <HAL_ETH_Init+0x12c>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4a39      	ldr	r2, [pc, #228]	@ (8001534 <HAL_ETH_Init+0x12c>)
 8001450:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001454:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001456:	4b37      	ldr	r3, [pc, #220]	@ (8001534 <HAL_ETH_Init+0x12c>)
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	4935      	ldr	r1, [pc, #212]	@ (8001534 <HAL_ETH_Init+0x12c>)
 8001460:	4313      	orrs	r3, r2
 8001462:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001464:	4b33      	ldr	r3, [pc, #204]	@ (8001534 <HAL_ETH_Init+0x12c>)
 8001466:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800147e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001480:	f7ff feac 	bl	80011dc <HAL_GetTick>
 8001484:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001486:	e011      	b.n	80014ac <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001488:	f7ff fea8 	bl	80011dc <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001496:	d909      	bls.n	80014ac <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2204      	movs	r2, #4
 800149c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	22e0      	movs	r2, #224	@ 0xe0
 80014a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e03d      	b.n	8001528 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1e4      	bne.n	8001488 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 f97a 	bl	80017b8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 fa25 	bl	8001914 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 fa7b 	bl	80019c6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	461a      	mov	r2, r3
 80014d6:	2100      	movs	r1, #0
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 f9e3 	bl	80018a4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80014ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001538 <HAL_ETH_Init+0x130>)
 80014fc:	430b      	orrs	r3, r1
 80014fe:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001512:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2210      	movs	r2, #16
 8001522:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40023800 	.word	0x40023800
 8001534:	40013800 	.word	0x40013800
 8001538:	00020060 	.word	0x00020060

0800153c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4b53      	ldr	r3, [pc, #332]	@ (80016a0 <ETH_SetMACConfig+0x164>)
 8001552:	4013      	ands	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	7b9b      	ldrb	r3, [r3, #14]
 800155a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	7c12      	ldrb	r2, [r2, #16]
 8001560:	2a00      	cmp	r2, #0
 8001562:	d102      	bne.n	800156a <ETH_SetMACConfig+0x2e>
 8001564:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001568:	e000      	b.n	800156c <ETH_SetMACConfig+0x30>
 800156a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800156c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	7c52      	ldrb	r2, [r2, #17]
 8001572:	2a00      	cmp	r2, #0
 8001574:	d102      	bne.n	800157c <ETH_SetMACConfig+0x40>
 8001576:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800157a:	e000      	b.n	800157e <ETH_SetMACConfig+0x42>
 800157c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800157e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001584:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	7fdb      	ldrb	r3, [r3, #31]
 800158a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800158c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001592:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	7f92      	ldrb	r2, [r2, #30]
 8001598:	2a00      	cmp	r2, #0
 800159a:	d102      	bne.n	80015a2 <ETH_SetMACConfig+0x66>
 800159c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015a0:	e000      	b.n	80015a4 <ETH_SetMACConfig+0x68>
 80015a2:	2200      	movs	r2, #0
                        macconf->Speed |
 80015a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	7f1b      	ldrb	r3, [r3, #28]
 80015aa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015ac:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	791b      	ldrb	r3, [r3, #4]
 80015b8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80015ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	f892 2020 	ldrb.w	r2, [r2, #32]
 80015c2:	2a00      	cmp	r2, #0
 80015c4:	d102      	bne.n	80015cc <ETH_SetMACConfig+0x90>
 80015c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ca:	e000      	b.n	80015ce <ETH_SetMACConfig+0x92>
 80015cc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015ce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	7bdb      	ldrb	r3, [r3, #15]
 80015d4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015d6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80015e4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80015e6:	4313      	orrs	r3, r2
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015fe:	2001      	movs	r0, #1
 8001600:	f7ff fdf8 	bl	80011f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800161a:	4013      	ands	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001622:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800162a:	2a00      	cmp	r2, #0
 800162c:	d101      	bne.n	8001632 <ETH_SetMACConfig+0xf6>
 800162e:	2280      	movs	r2, #128	@ 0x80
 8001630:	e000      	b.n	8001634 <ETH_SetMACConfig+0xf8>
 8001632:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001634:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800163a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001642:	2a01      	cmp	r2, #1
 8001644:	d101      	bne.n	800164a <ETH_SetMACConfig+0x10e>
 8001646:	2208      	movs	r2, #8
 8001648:	e000      	b.n	800164c <ETH_SetMACConfig+0x110>
 800164a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800164c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001654:	2a01      	cmp	r2, #1
 8001656:	d101      	bne.n	800165c <ETH_SetMACConfig+0x120>
 8001658:	2204      	movs	r2, #4
 800165a:	e000      	b.n	800165e <ETH_SetMACConfig+0x122>
 800165c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800165e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001666:	2a01      	cmp	r2, #1
 8001668:	d101      	bne.n	800166e <ETH_SetMACConfig+0x132>
 800166a:	2202      	movs	r2, #2
 800166c:	e000      	b.n	8001670 <ETH_SetMACConfig+0x134>
 800166e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001670:	4313      	orrs	r3, r2
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	4313      	orrs	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001688:	2001      	movs	r0, #1
 800168a:	f7ff fdb3 	bl	80011f4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	619a      	str	r2, [r3, #24]
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	fd20810f 	.word	0xfd20810f

080016a4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4b3d      	ldr	r3, [pc, #244]	@ (80017b4 <ETH_SetDMAConfig+0x110>)
 80016be:	4013      	ands	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	7b1b      	ldrb	r3, [r3, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <ETH_SetDMAConfig+0x2c>
 80016ca:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80016ce:	e000      	b.n	80016d2 <ETH_SetDMAConfig+0x2e>
 80016d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	7b5b      	ldrb	r3, [r3, #13]
 80016d6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016d8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	7f52      	ldrb	r2, [r2, #29]
 80016de:	2a00      	cmp	r2, #0
 80016e0:	d102      	bne.n	80016e8 <ETH_SetDMAConfig+0x44>
 80016e2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80016e6:	e000      	b.n	80016ea <ETH_SetDMAConfig+0x46>
 80016e8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016ea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	7b9b      	ldrb	r3, [r3, #14]
 80016f0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016f2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	7f1b      	ldrb	r3, [r3, #28]
 80016fe:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001700:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	7f9b      	ldrb	r3, [r3, #30]
 8001706:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001708:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800170e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001716:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001718:	4313      	orrs	r3, r2
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	4313      	orrs	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001728:	461a      	mov	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800173a:	2001      	movs	r0, #1
 800173c:	f7ff fd5a 	bl	80011f4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001748:	461a      	mov	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	791b      	ldrb	r3, [r3, #4]
 8001752:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001758:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800175e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001764:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800176c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800176e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001774:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001776:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800177c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001786:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800178a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001798:	2001      	movs	r0, #1
 800179a:	f7ff fd2b 	bl	80011f4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017a6:	461a      	mov	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6013      	str	r3, [r2, #0]
}
 80017ac:	bf00      	nop
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	f8de3f23 	.word	0xf8de3f23

080017b8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b0a6      	sub	sp, #152	@ 0x98
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80017c0:	2301      	movs	r3, #1
 80017c2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80017c6:	2301      	movs	r3, #1
 80017c8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80017cc:	2300      	movs	r3, #0
 80017ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80017d6:	2301      	movs	r3, #1
 80017d8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80017e2:	2301      	movs	r3, #1
 80017e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80017e8:	2301      	movs	r3, #1
 80017ea:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017fa:	2300      	movs	r3, #0
 80017fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001804:	2300      	movs	r3, #0
 8001806:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800180e:	2300      	movs	r3, #0
 8001810:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001820:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001824:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001826:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800182a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001832:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001836:	4619      	mov	r1, r3
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff fe7f 	bl	800153c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800183e:	2301      	movs	r3, #1
 8001840:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001842:	2301      	movs	r3, #1
 8001844:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001846:	2301      	movs	r3, #1
 8001848:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800184c:	2301      	movs	r3, #1
 800184e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001860:	2300      	movs	r3, #0
 8001862:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001864:	2301      	movs	r3, #1
 8001866:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800186a:	2301      	movs	r3, #1
 800186c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800186e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001872:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001874:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001878:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800187a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800187e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001880:	2301      	movs	r3, #1
 8001882:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001886:	2300      	movs	r3, #0
 8001888:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800188e:	f107 0308 	add.w	r3, r7, #8
 8001892:	4619      	mov	r1, r3
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff05 	bl	80016a4 <ETH_SetDMAConfig>
}
 800189a:	bf00      	nop
 800189c:	3798      	adds	r7, #152	@ 0x98
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3305      	adds	r3, #5
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	3204      	adds	r2, #4
 80018bc:	7812      	ldrb	r2, [r2, #0]
 80018be:	4313      	orrs	r3, r2
 80018c0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	4b11      	ldr	r3, [pc, #68]	@ (800190c <ETH_MACAddressConfig+0x68>)
 80018c6:	4413      	add	r3, r2
 80018c8:	461a      	mov	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3303      	adds	r3, #3
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	061a      	lsls	r2, r3, #24
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3302      	adds	r3, #2
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	041b      	lsls	r3, r3, #16
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3301      	adds	r3, #1
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	4313      	orrs	r3, r2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	7812      	ldrb	r2, [r2, #0]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <ETH_MACAddressConfig+0x6c>)
 80018f6:	4413      	add	r3, r2
 80018f8:	461a      	mov	r2, r3
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	6013      	str	r3, [r2, #0]
}
 80018fe:	bf00      	nop
 8001900:	371c      	adds	r7, #28
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40028040 	.word	0x40028040
 8001910:	40028044 	.word	0x40028044

08001914 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	e03e      	b.n	80019a0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68d9      	ldr	r1, [r3, #12]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2200      	movs	r2, #0
 800193e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2200      	movs	r2, #0
 800194a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800194c:	68b9      	ldr	r1, [r7, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	3206      	adds	r2, #6
 8001954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d80c      	bhi.n	8001984 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68d9      	ldr	r1, [r3, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	440b      	add	r3, r1
 800197c:	461a      	mov	r2, r3
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	e004      	b.n	800198e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	461a      	mov	r2, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3301      	adds	r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d9bd      	bls.n	8001922 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019b8:	611a      	str	r2, [r3, #16]
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b085      	sub	sp, #20
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	e048      	b.n	8001a66 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6919      	ldr	r1, [r3, #16]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2200      	movs	r2, #0
 80019f0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2200      	movs	r2, #0
 80019fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2200      	movs	r2, #0
 8001a02:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2200      	movs	r2, #0
 8001a08:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001a10:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a2a:	68b9      	ldr	r1, [r7, #8]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	3212      	adds	r2, #18
 8001a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d80c      	bhi.n	8001a56 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6919      	ldr	r1, [r3, #16]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	440b      	add	r3, r1
 8001a4e:	461a      	mov	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	60da      	str	r2, [r3, #12]
 8001a54:	e004      	b.n	8001a60 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	3301      	adds	r3, #1
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d9b3      	bls.n	80019d4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691a      	ldr	r2, [r3, #16]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a96:	60da      	str	r2, [r3, #12]
}
 8001a98:	bf00      	nop
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	@ 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	e175      	b.n	8001db0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	f040 8164 	bne.w	8001daa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d005      	beq.n	8001afa <HAL_GPIO_Init+0x56>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d130      	bne.n	8001b5c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	2203      	movs	r2, #3
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b30:	2201      	movs	r2, #1
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	f003 0201 	and.w	r2, r3, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d017      	beq.n	8001b98 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d123      	bne.n	8001bec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	08da      	lsrs	r2, r3, #3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3208      	adds	r2, #8
 8001bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	220f      	movs	r2, #15
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	691a      	ldr	r2, [r3, #16]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	08da      	lsrs	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3208      	adds	r2, #8
 8001be6:	69b9      	ldr	r1, [r7, #24]
 8001be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0203 	and.w	r2, r3, #3
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 80be 	beq.w	8001daa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2e:	4b66      	ldr	r3, [pc, #408]	@ (8001dc8 <HAL_GPIO_Init+0x324>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	4a65      	ldr	r2, [pc, #404]	@ (8001dc8 <HAL_GPIO_Init+0x324>)
 8001c34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3a:	4b63      	ldr	r3, [pc, #396]	@ (8001dc8 <HAL_GPIO_Init+0x324>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c46:	4a61      	ldr	r2, [pc, #388]	@ (8001dcc <HAL_GPIO_Init+0x328>)
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a58      	ldr	r2, [pc, #352]	@ (8001dd0 <HAL_GPIO_Init+0x32c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d037      	beq.n	8001ce2 <HAL_GPIO_Init+0x23e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a57      	ldr	r2, [pc, #348]	@ (8001dd4 <HAL_GPIO_Init+0x330>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d031      	beq.n	8001cde <HAL_GPIO_Init+0x23a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a56      	ldr	r2, [pc, #344]	@ (8001dd8 <HAL_GPIO_Init+0x334>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d02b      	beq.n	8001cda <HAL_GPIO_Init+0x236>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a55      	ldr	r2, [pc, #340]	@ (8001ddc <HAL_GPIO_Init+0x338>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d025      	beq.n	8001cd6 <HAL_GPIO_Init+0x232>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a54      	ldr	r2, [pc, #336]	@ (8001de0 <HAL_GPIO_Init+0x33c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d01f      	beq.n	8001cd2 <HAL_GPIO_Init+0x22e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a53      	ldr	r2, [pc, #332]	@ (8001de4 <HAL_GPIO_Init+0x340>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d019      	beq.n	8001cce <HAL_GPIO_Init+0x22a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a52      	ldr	r2, [pc, #328]	@ (8001de8 <HAL_GPIO_Init+0x344>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d013      	beq.n	8001cca <HAL_GPIO_Init+0x226>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a51      	ldr	r2, [pc, #324]	@ (8001dec <HAL_GPIO_Init+0x348>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00d      	beq.n	8001cc6 <HAL_GPIO_Init+0x222>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a50      	ldr	r2, [pc, #320]	@ (8001df0 <HAL_GPIO_Init+0x34c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d007      	beq.n	8001cc2 <HAL_GPIO_Init+0x21e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4f      	ldr	r2, [pc, #316]	@ (8001df4 <HAL_GPIO_Init+0x350>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d101      	bne.n	8001cbe <HAL_GPIO_Init+0x21a>
 8001cba:	2309      	movs	r3, #9
 8001cbc:	e012      	b.n	8001ce4 <HAL_GPIO_Init+0x240>
 8001cbe:	230a      	movs	r3, #10
 8001cc0:	e010      	b.n	8001ce4 <HAL_GPIO_Init+0x240>
 8001cc2:	2308      	movs	r3, #8
 8001cc4:	e00e      	b.n	8001ce4 <HAL_GPIO_Init+0x240>
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	e00c      	b.n	8001ce4 <HAL_GPIO_Init+0x240>
 8001cca:	2306      	movs	r3, #6
 8001ccc:	e00a      	b.n	8001ce4 <HAL_GPIO_Init+0x240>
 8001cce:	2305      	movs	r3, #5
 8001cd0:	e008      	b.n	8001ce4 <HAL_GPIO_Init+0x240>
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	e006      	b.n	8001ce4 <HAL_GPIO_Init+0x240>
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e004      	b.n	8001ce4 <HAL_GPIO_Init+0x240>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e002      	b.n	8001ce4 <HAL_GPIO_Init+0x240>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_GPIO_Init+0x240>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	f002 0203 	and.w	r2, r2, #3
 8001cea:	0092      	lsls	r2, r2, #2
 8001cec:	4093      	lsls	r3, r2
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cf4:	4935      	ldr	r1, [pc, #212]	@ (8001dcc <HAL_GPIO_Init+0x328>)
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d02:	4b3d      	ldr	r3, [pc, #244]	@ (8001df8 <HAL_GPIO_Init+0x354>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d26:	4a34      	ldr	r2, [pc, #208]	@ (8001df8 <HAL_GPIO_Init+0x354>)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d2c:	4b32      	ldr	r3, [pc, #200]	@ (8001df8 <HAL_GPIO_Init+0x354>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d50:	4a29      	ldr	r2, [pc, #164]	@ (8001df8 <HAL_GPIO_Init+0x354>)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d56:	4b28      	ldr	r3, [pc, #160]	@ (8001df8 <HAL_GPIO_Init+0x354>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001df8 <HAL_GPIO_Init+0x354>)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d80:	4b1d      	ldr	r3, [pc, #116]	@ (8001df8 <HAL_GPIO_Init+0x354>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001da4:	4a14      	ldr	r2, [pc, #80]	@ (8001df8 <HAL_GPIO_Init+0x354>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3301      	adds	r3, #1
 8001dae:	61fb      	str	r3, [r7, #28]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	2b0f      	cmp	r3, #15
 8001db4:	f67f ae86 	bls.w	8001ac4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3724      	adds	r7, #36	@ 0x24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40013800 	.word	0x40013800
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	40020400 	.word	0x40020400
 8001dd8:	40020800 	.word	0x40020800
 8001ddc:	40020c00 	.word	0x40020c00
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40021400 	.word	0x40021400
 8001de8:	40021800 	.word	0x40021800
 8001dec:	40021c00 	.word	0x40021c00
 8001df0:	40022000 	.word	0x40022000
 8001df4:	40022400 	.word	0x40022400
 8001df8:	40013c00 	.word	0x40013c00

08001dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e0c:	787b      	ldrb	r3, [r7, #1]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e12:	887a      	ldrh	r2, [r7, #2]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e18:	e003      	b.n	8001e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e1a:	887b      	ldrh	r3, [r7, #2]
 8001e1c:	041a      	lsls	r2, r3, #16
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	619a      	str	r2, [r3, #24]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e08b      	b.n	8001f5a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7fe fc6a 	bl	8000730 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2224      	movs	r2, #36	@ 0x24
 8001e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d107      	bne.n	8001eaa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	e006      	b.n	8001eb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001eb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d108      	bne.n	8001ed2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	e007      	b.n	8001ee2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ee0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6859      	ldr	r1, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b1d      	ldr	r3, [pc, #116]	@ (8001f64 <HAL_I2C_Init+0x134>)
 8001eee:	430b      	orrs	r3, r1
 8001ef0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691a      	ldr	r2, [r3, #16]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69d9      	ldr	r1, [r3, #28]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1a      	ldr	r2, [r3, #32]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2220      	movs	r2, #32
 8001f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	02008000 	.word	0x02008000

08001f68 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	461a      	mov	r2, r3
 8001f74:	460b      	mov	r3, r1
 8001f76:	817b      	strh	r3, [r7, #10]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	f040 80fd 	bne.w	8002184 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_I2C_Master_Transmit+0x30>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e0f6      	b.n	8002186 <HAL_I2C_Master_Transmit+0x21e>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fa0:	f7ff f91c 	bl	80011dc <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2319      	movs	r3, #25
 8001fac:	2201      	movs	r2, #1
 8001fae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 f914 	bl	80021e0 <I2C_WaitOnFlagUntilTimeout>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e0e1      	b.n	8002186 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2221      	movs	r2, #33	@ 0x21
 8001fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2210      	movs	r2, #16
 8001fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	893a      	ldrh	r2, [r7, #8]
 8001fe2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	2bff      	cmp	r3, #255	@ 0xff
 8001ff2:	d906      	bls.n	8002002 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	22ff      	movs	r2, #255	@ 0xff
 8001ff8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001ffa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	e007      	b.n	8002012 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002006:	b29a      	uxth	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800200c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002010:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002016:	2b00      	cmp	r3, #0
 8002018:	d024      	beq.n	8002064 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201e:	781a      	ldrb	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002034:	b29b      	uxth	r3, r3
 8002036:	3b01      	subs	r3, #1
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002042:	3b01      	subs	r3, #1
 8002044:	b29a      	uxth	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800204e:	b2db      	uxtb	r3, r3
 8002050:	3301      	adds	r3, #1
 8002052:	b2da      	uxtb	r2, r3
 8002054:	8979      	ldrh	r1, [r7, #10]
 8002056:	4b4e      	ldr	r3, [pc, #312]	@ (8002190 <HAL_I2C_Master_Transmit+0x228>)
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 fa83 	bl	8002568 <I2C_TransferConfig>
 8002062:	e066      	b.n	8002132 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002068:	b2da      	uxtb	r2, r3
 800206a:	8979      	ldrh	r1, [r7, #10]
 800206c:	4b48      	ldr	r3, [pc, #288]	@ (8002190 <HAL_I2C_Master_Transmit+0x228>)
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 fa78 	bl	8002568 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002078:	e05b      	b.n	8002132 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	6a39      	ldr	r1, [r7, #32]
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 f907 	bl	8002292 <I2C_WaitOnTXISFlagUntilTimeout>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e07b      	b.n	8002186 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002092:	781a      	ldrb	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d034      	beq.n	8002132 <HAL_I2C_Master_Transmit+0x1ca>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d130      	bne.n	8002132 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	2200      	movs	r2, #0
 80020d8:	2180      	movs	r1, #128	@ 0x80
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f880 	bl	80021e0 <I2C_WaitOnFlagUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e04d      	b.n	8002186 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	2bff      	cmp	r3, #255	@ 0xff
 80020f2:	d90e      	bls.n	8002112 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	22ff      	movs	r2, #255	@ 0xff
 80020f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	8979      	ldrh	r1, [r7, #10]
 8002102:	2300      	movs	r3, #0
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 fa2c 	bl	8002568 <I2C_TransferConfig>
 8002110:	e00f      	b.n	8002132 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002120:	b2da      	uxtb	r2, r3
 8002122:	8979      	ldrh	r1, [r7, #10]
 8002124:	2300      	movs	r3, #0
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 fa1b 	bl	8002568 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002136:	b29b      	uxth	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d19e      	bne.n	800207a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	6a39      	ldr	r1, [r7, #32]
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 f8ed 	bl	8002320 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e01a      	b.n	8002186 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2220      	movs	r2, #32
 8002156:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6859      	ldr	r1, [r3, #4]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	4b0c      	ldr	r3, [pc, #48]	@ (8002194 <HAL_I2C_Master_Transmit+0x22c>)
 8002164:	400b      	ands	r3, r1
 8002166:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	e000      	b.n	8002186 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002184:	2302      	movs	r3, #2
  }
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	80002000 	.word	0x80002000
 8002194:	fe00e800 	.word	0xfe00e800

08002198 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d103      	bne.n	80021b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2200      	movs	r2, #0
 80021b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d007      	beq.n	80021d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699a      	ldr	r2, [r3, #24]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0201 	orr.w	r2, r2, #1
 80021d2:	619a      	str	r2, [r3, #24]
  }
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	4613      	mov	r3, r2
 80021ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021f0:	e03b      	b.n	800226a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	6839      	ldr	r1, [r7, #0]
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 f8d6 	bl	80023a8 <I2C_IsErrorOccurred>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e041      	b.n	800228a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220c:	d02d      	beq.n	800226a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220e:	f7fe ffe5 	bl	80011dc <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d302      	bcc.n	8002224 <I2C_WaitOnFlagUntilTimeout+0x44>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d122      	bne.n	800226a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	4013      	ands	r3, r2
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	429a      	cmp	r2, r3
 8002232:	bf0c      	ite	eq
 8002234:	2301      	moveq	r3, #1
 8002236:	2300      	movne	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	461a      	mov	r2, r3
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	429a      	cmp	r2, r3
 8002240:	d113      	bne.n	800226a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002246:	f043 0220 	orr.w	r2, r3, #32
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2220      	movs	r2, #32
 8002252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e00f      	b.n	800228a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699a      	ldr	r2, [r3, #24]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	4013      	ands	r3, r2
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	429a      	cmp	r2, r3
 8002278:	bf0c      	ite	eq
 800227a:	2301      	moveq	r3, #1
 800227c:	2300      	movne	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	429a      	cmp	r2, r3
 8002286:	d0b4      	beq.n	80021f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800229e:	e033      	b.n	8002308 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f87f 	bl	80023a8 <I2C_IsErrorOccurred>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e031      	b.n	8002318 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ba:	d025      	beq.n	8002308 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022bc:	f7fe ff8e 	bl	80011dc <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d302      	bcc.n	80022d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d11a      	bne.n	8002308 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d013      	beq.n	8002308 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e4:	f043 0220 	orr.w	r2, r3, #32
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e007      	b.n	8002318 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b02      	cmp	r3, #2
 8002314:	d1c4      	bne.n	80022a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800232c:	e02f      	b.n	800238e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f838 	bl	80023a8 <I2C_IsErrorOccurred>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e02d      	b.n	800239e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002342:	f7fe ff4b 	bl	80011dc <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	429a      	cmp	r2, r3
 8002350:	d302      	bcc.n	8002358 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d11a      	bne.n	800238e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f003 0320 	and.w	r3, r3, #32
 8002362:	2b20      	cmp	r3, #32
 8002364:	d013      	beq.n	800238e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236a:	f043 0220 	orr.w	r2, r3, #32
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2220      	movs	r2, #32
 8002376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e007      	b.n	800239e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f003 0320 	and.w	r3, r3, #32
 8002398:	2b20      	cmp	r3, #32
 800239a:	d1c8      	bne.n	800232e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	@ 0x28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d068      	beq.n	80024a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2210      	movs	r2, #16
 80023da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023dc:	e049      	b.n	8002472 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e4:	d045      	beq.n	8002472 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023e6:	f7fe fef9 	bl	80011dc <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d302      	bcc.n	80023fc <I2C_IsErrorOccurred+0x54>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d13a      	bne.n	8002472 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002406:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800240e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800241a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800241e:	d121      	bne.n	8002464 <I2C_IsErrorOccurred+0xbc>
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002426:	d01d      	beq.n	8002464 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002428:	7cfb      	ldrb	r3, [r7, #19]
 800242a:	2b20      	cmp	r3, #32
 800242c:	d01a      	beq.n	8002464 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800243c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800243e:	f7fe fecd 	bl	80011dc <HAL_GetTick>
 8002442:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002444:	e00e      	b.n	8002464 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002446:	f7fe fec9 	bl	80011dc <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b19      	cmp	r3, #25
 8002452:	d907      	bls.n	8002464 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	f043 0320 	orr.w	r3, r3, #32
 800245a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002462:	e006      	b.n	8002472 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f003 0320 	and.w	r3, r3, #32
 800246e:	2b20      	cmp	r3, #32
 8002470:	d1e9      	bne.n	8002446 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f003 0320 	and.w	r3, r3, #32
 800247c:	2b20      	cmp	r3, #32
 800247e:	d003      	beq.n	8002488 <I2C_IsErrorOccurred+0xe0>
 8002480:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0aa      	beq.n	80023de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002488:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800248c:	2b00      	cmp	r3, #0
 800248e:	d103      	bne.n	8002498 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2220      	movs	r2, #32
 8002496:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	f043 0304 	orr.w	r3, r3, #4
 800249e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00b      	beq.n	80024d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00b      	beq.n	80024f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	f043 0308 	orr.w	r3, r3, #8
 80024e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00b      	beq.n	8002514 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	f043 0302 	orr.w	r3, r3, #2
 8002502:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800250c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002518:	2b00      	cmp	r3, #0
 800251a:	d01c      	beq.n	8002556 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f7ff fe3b 	bl	8002198 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6859      	ldr	r1, [r3, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <I2C_IsErrorOccurred+0x1bc>)
 800252e:	400b      	ands	r3, r1
 8002530:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	431a      	orrs	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2220      	movs	r2, #32
 8002542:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002556:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800255a:	4618      	mov	r0, r3
 800255c:	3728      	adds	r7, #40	@ 0x28
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	fe00e800 	.word	0xfe00e800

08002568 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	607b      	str	r3, [r7, #4]
 8002572:	460b      	mov	r3, r1
 8002574:	817b      	strh	r3, [r7, #10]
 8002576:	4613      	mov	r3, r2
 8002578:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800257a:	897b      	ldrh	r3, [r7, #10]
 800257c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002580:	7a7b      	ldrb	r3, [r7, #9]
 8002582:	041b      	lsls	r3, r3, #16
 8002584:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002588:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	4313      	orrs	r3, r2
 8002592:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002596:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	0d5b      	lsrs	r3, r3, #21
 80025a2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80025a6:	4b08      	ldr	r3, [pc, #32]	@ (80025c8 <I2C_TransferConfig+0x60>)
 80025a8:	430b      	orrs	r3, r1
 80025aa:	43db      	mvns	r3, r3
 80025ac:	ea02 0103 	and.w	r1, r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80025ba:	bf00      	nop
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	03ff63ff 	.word	0x03ff63ff

080025cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d138      	bne.n	8002654 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d101      	bne.n	80025f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e032      	b.n	8002656 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2224      	movs	r2, #36	@ 0x24
 80025fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0201 	bic.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800261e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6819      	ldr	r1, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	e000      	b.n	8002656 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002654:	2302      	movs	r3, #2
  }
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002662:	b480      	push	{r7}
 8002664:	b085      	sub	sp, #20
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b20      	cmp	r3, #32
 8002676:	d139      	bne.n	80026ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002682:	2302      	movs	r3, #2
 8002684:	e033      	b.n	80026ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2224      	movs	r2, #36	@ 0x24
 8002692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0201 	bic.w	r2, r2, #1
 80026a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4313      	orrs	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	e000      	b.n	80026ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026ec:	2302      	movs	r3, #2
  }
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b086      	sub	sp, #24
 80026fe:	af02      	add	r7, sp, #8
 8002700:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e108      	b.n	800291e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d106      	bne.n	800272c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fe fc22 	bl	8000f70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2203      	movs	r2, #3
 8002730:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800273a:	d102      	bne.n	8002742 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f002 f8dc 	bl	8004904 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	7c1a      	ldrb	r2, [r3, #16]
 8002754:	f88d 2000 	strb.w	r2, [sp]
 8002758:	3304      	adds	r3, #4
 800275a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800275c:	f002 f878 	bl	8004850 <USB_CoreInit>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d005      	beq.n	8002772 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2202      	movs	r2, #2
 800276a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e0d5      	b.n	800291e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2100      	movs	r1, #0
 8002778:	4618      	mov	r0, r3
 800277a:	f002 f8d4 	bl	8004926 <USB_SetCurrentMode>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2202      	movs	r2, #2
 8002788:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e0c6      	b.n	800291e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002790:	2300      	movs	r3, #0
 8002792:	73fb      	strb	r3, [r7, #15]
 8002794:	e04a      	b.n	800282c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	3315      	adds	r3, #21
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	440b      	add	r3, r1
 80027b8:	3314      	adds	r3, #20
 80027ba:	7bfa      	ldrb	r2, [r7, #15]
 80027bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027be:	7bfa      	ldrb	r2, [r7, #15]
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	b298      	uxth	r0, r3
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4413      	add	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	332e      	adds	r3, #46	@ 0x2e
 80027d2:	4602      	mov	r2, r0
 80027d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027d6:	7bfa      	ldrb	r2, [r7, #15]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	440b      	add	r3, r1
 80027e4:	3318      	adds	r3, #24
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027ea:	7bfa      	ldrb	r2, [r7, #15]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4413      	add	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	331c      	adds	r3, #28
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027fe:	7bfa      	ldrb	r2, [r7, #15]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	3320      	adds	r3, #32
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002812:	7bfa      	ldrb	r2, [r7, #15]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	3324      	adds	r3, #36	@ 0x24
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	3301      	adds	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	791b      	ldrb	r3, [r3, #4]
 8002830:	7bfa      	ldrb	r2, [r7, #15]
 8002832:	429a      	cmp	r2, r3
 8002834:	d3af      	bcc.n	8002796 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]
 800283a:	e044      	b.n	80028c6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800283c:	7bfa      	ldrb	r2, [r7, #15]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4413      	add	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002852:	7bfa      	ldrb	r2, [r7, #15]
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002864:	7bfa      	ldrb	r2, [r7, #15]
 8002866:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002868:	7bfa      	ldrb	r2, [r7, #15]
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4413      	add	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800287e:	7bfa      	ldrb	r2, [r7, #15]
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002894:	7bfa      	ldrb	r2, [r7, #15]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028aa:	7bfa      	ldrb	r2, [r7, #15]
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	3301      	adds	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	791b      	ldrb	r3, [r3, #4]
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d3b5      	bcc.n	800283c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	7c1a      	ldrb	r2, [r3, #16]
 80028d8:	f88d 2000 	strb.w	r2, [sp]
 80028dc:	3304      	adds	r3, #4
 80028de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028e0:	f002 f86e 	bl	80049c0 <USB_DevInit>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2202      	movs	r2, #2
 80028ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e013      	b.n	800291e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	7b1b      	ldrb	r3, [r3, #12]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d102      	bne.n	8002912 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f80b 	bl	8002928 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f002 fa29 	bl	8004d6e <USB_DevDisconnect>

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002956:	4b05      	ldr	r3, [pc, #20]	@ (800296c <HAL_PCDEx_ActivateLPM+0x44>)
 8002958:	4313      	orrs	r3, r2
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	10000003 	.word	0x10000003

08002970 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002974:	4b05      	ldr	r3, [pc, #20]	@ (800298c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a04      	ldr	r2, [pc, #16]	@ (800298c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800297a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800297e:	6013      	str	r3, [r2, #0]
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40007000 	.word	0x40007000

08002990 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002998:	2300      	movs	r3, #0
 800299a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e291      	b.n	8002eca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8087 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b4:	4b96      	ldr	r3, [pc, #600]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d00c      	beq.n	80029da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029c0:	4b93      	ldr	r3, [pc, #588]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d112      	bne.n	80029f2 <HAL_RCC_OscConfig+0x62>
 80029cc:	4b90      	ldr	r3, [pc, #576]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029d8:	d10b      	bne.n	80029f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029da:	4b8d      	ldr	r3, [pc, #564]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d06c      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x130>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d168      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e26b      	b.n	8002eca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029fa:	d106      	bne.n	8002a0a <HAL_RCC_OscConfig+0x7a>
 80029fc:	4b84      	ldr	r3, [pc, #528]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a83      	ldr	r2, [pc, #524]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002a02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	e02e      	b.n	8002a68 <HAL_RCC_OscConfig+0xd8>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x9c>
 8002a12:	4b7f      	ldr	r3, [pc, #508]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a7e      	ldr	r2, [pc, #504]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002a18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a7b      	ldr	r2, [pc, #492]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002a24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e01d      	b.n	8002a68 <HAL_RCC_OscConfig+0xd8>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0xc0>
 8002a36:	4b76      	ldr	r3, [pc, #472]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a75      	ldr	r2, [pc, #468]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002a3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	4b73      	ldr	r3, [pc, #460]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a72      	ldr	r2, [pc, #456]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCC_OscConfig+0xd8>
 8002a50:	4b6f      	ldr	r3, [pc, #444]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a6e      	ldr	r2, [pc, #440]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a6b      	ldr	r2, [pc, #428]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002a62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d013      	beq.n	8002a98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a70:	f7fe fbb4 	bl	80011dc <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a78:	f7fe fbb0 	bl	80011dc <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	@ 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e21f      	b.n	8002eca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	4b61      	ldr	r3, [pc, #388]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0xe8>
 8002a96:	e014      	b.n	8002ac2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7fe fba0 	bl	80011dc <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa0:	f7fe fb9c 	bl	80011dc <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	@ 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e20b      	b.n	8002eca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab2:	4b57      	ldr	r3, [pc, #348]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x110>
 8002abe:	e000      	b.n	8002ac2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d069      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ace:	4b50      	ldr	r3, [pc, #320]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ada:	4b4d      	ldr	r3, [pc, #308]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d11c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x190>
 8002ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d116      	bne.n	8002b20 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	4b47      	ldr	r3, [pc, #284]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_RCC_OscConfig+0x17a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e1df      	b.n	8002eca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0a:	4b41      	ldr	r3, [pc, #260]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	493d      	ldr	r1, [pc, #244]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1e:	e040      	b.n	8002ba2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d023      	beq.n	8002b70 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b28:	4b39      	ldr	r3, [pc, #228]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a38      	ldr	r2, [pc, #224]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7fe fb52 	bl	80011dc <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b3c:	f7fe fb4e 	bl	80011dc <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e1bd      	b.n	8002eca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4e:	4b30      	ldr	r3, [pc, #192]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4929      	ldr	r1, [pc, #164]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]
 8002b6e:	e018      	b.n	8002ba2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b70:	4b27      	ldr	r3, [pc, #156]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a26      	ldr	r2, [pc, #152]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002b76:	f023 0301 	bic.w	r3, r3, #1
 8002b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fb2e 	bl	80011dc <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b84:	f7fe fb2a 	bl	80011dc <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e199      	b.n	8002eca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b96:	4b1e      	ldr	r3, [pc, #120]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d038      	beq.n	8002c20 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d019      	beq.n	8002bea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bb6:	4b16      	ldr	r3, [pc, #88]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bba:	4a15      	ldr	r2, [pc, #84]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc2:	f7fe fb0b 	bl	80011dc <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bca:	f7fe fb07 	bl	80011dc <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e176      	b.n	8002eca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002bde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x23a>
 8002be8:	e01a      	b.n	8002c20 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bea:	4b09      	ldr	r3, [pc, #36]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bee:	4a08      	ldr	r2, [pc, #32]	@ (8002c10 <HAL_RCC_OscConfig+0x280>)
 8002bf0:	f023 0301 	bic.w	r3, r3, #1
 8002bf4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf6:	f7fe faf1 	bl	80011dc <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bfc:	e00a      	b.n	8002c14 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfe:	f7fe faed 	bl	80011dc <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d903      	bls.n	8002c14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e15c      	b.n	8002eca <HAL_RCC_OscConfig+0x53a>
 8002c10:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c14:	4b91      	ldr	r3, [pc, #580]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002c16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1ee      	bne.n	8002bfe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80a4 	beq.w	8002d76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2e:	4b8b      	ldr	r3, [pc, #556]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10d      	bne.n	8002c56 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3a:	4b88      	ldr	r3, [pc, #544]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	4a87      	ldr	r2, [pc, #540]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c46:	4b85      	ldr	r3, [pc, #532]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c52:	2301      	movs	r3, #1
 8002c54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c56:	4b82      	ldr	r3, [pc, #520]	@ (8002e60 <HAL_RCC_OscConfig+0x4d0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d118      	bne.n	8002c94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c62:	4b7f      	ldr	r3, [pc, #508]	@ (8002e60 <HAL_RCC_OscConfig+0x4d0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a7e      	ldr	r2, [pc, #504]	@ (8002e60 <HAL_RCC_OscConfig+0x4d0>)
 8002c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6e:	f7fe fab5 	bl	80011dc <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c76:	f7fe fab1 	bl	80011dc <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b64      	cmp	r3, #100	@ 0x64
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e120      	b.n	8002eca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c88:	4b75      	ldr	r3, [pc, #468]	@ (8002e60 <HAL_RCC_OscConfig+0x4d0>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d106      	bne.n	8002caa <HAL_RCC_OscConfig+0x31a>
 8002c9c:	4b6f      	ldr	r3, [pc, #444]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca0:	4a6e      	ldr	r2, [pc, #440]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca8:	e02d      	b.n	8002d06 <HAL_RCC_OscConfig+0x376>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x33c>
 8002cb2:	4b6a      	ldr	r3, [pc, #424]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb6:	4a69      	ldr	r2, [pc, #420]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cbe:	4b67      	ldr	r3, [pc, #412]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc2:	4a66      	ldr	r2, [pc, #408]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002cc4:	f023 0304 	bic.w	r3, r3, #4
 8002cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cca:	e01c      	b.n	8002d06 <HAL_RCC_OscConfig+0x376>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d10c      	bne.n	8002cee <HAL_RCC_OscConfig+0x35e>
 8002cd4:	4b61      	ldr	r3, [pc, #388]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd8:	4a60      	ldr	r2, [pc, #384]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002cda:	f043 0304 	orr.w	r3, r3, #4
 8002cde:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce4:	4a5d      	ldr	r2, [pc, #372]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cec:	e00b      	b.n	8002d06 <HAL_RCC_OscConfig+0x376>
 8002cee:	4b5b      	ldr	r3, [pc, #364]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf2:	4a5a      	ldr	r2, [pc, #360]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cfa:	4b58      	ldr	r3, [pc, #352]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cfe:	4a57      	ldr	r2, [pc, #348]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002d00:	f023 0304 	bic.w	r3, r3, #4
 8002d04:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d015      	beq.n	8002d3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0e:	f7fe fa65 	bl	80011dc <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d14:	e00a      	b.n	8002d2c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d16:	f7fe fa61 	bl	80011dc <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e0ce      	b.n	8002eca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2c:	4b4b      	ldr	r3, [pc, #300]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ee      	beq.n	8002d16 <HAL_RCC_OscConfig+0x386>
 8002d38:	e014      	b.n	8002d64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3a:	f7fe fa4f 	bl	80011dc <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d40:	e00a      	b.n	8002d58 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d42:	f7fe fa4b 	bl	80011dc <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e0b8      	b.n	8002eca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d58:	4b40      	ldr	r3, [pc, #256]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1ee      	bne.n	8002d42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d64:	7dfb      	ldrb	r3, [r7, #23]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d105      	bne.n	8002d76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6a:	4b3c      	ldr	r3, [pc, #240]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	4a3b      	ldr	r2, [pc, #236]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002d70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d74:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 80a4 	beq.w	8002ec8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d80:	4b36      	ldr	r3, [pc, #216]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 030c 	and.w	r3, r3, #12
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d06b      	beq.n	8002e64 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d149      	bne.n	8002e28 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d94:	4b31      	ldr	r3, [pc, #196]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a30      	ldr	r2, [pc, #192]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002d9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7fe fa1c 	bl	80011dc <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da8:	f7fe fa18 	bl	80011dc <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e087      	b.n	8002eca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dba:	4b28      	ldr	r3, [pc, #160]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69da      	ldr	r2, [r3, #28]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd4:	019b      	lsls	r3, r3, #6
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ddc:	085b      	lsrs	r3, r3, #1
 8002dde:	3b01      	subs	r3, #1
 8002de0:	041b      	lsls	r3, r3, #16
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de8:	061b      	lsls	r3, r3, #24
 8002dea:	4313      	orrs	r3, r2
 8002dec:	4a1b      	ldr	r2, [pc, #108]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002dee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002df2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df4:	4b19      	ldr	r3, [pc, #100]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a18      	ldr	r2, [pc, #96]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002dfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fe f9ec 	bl	80011dc <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e08:	f7fe f9e8 	bl	80011dc <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e057      	b.n	8002eca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1a:	4b10      	ldr	r3, [pc, #64]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0x478>
 8002e26:	e04f      	b.n	8002ec8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e28:	4b0c      	ldr	r3, [pc, #48]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002e2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e34:	f7fe f9d2 	bl	80011dc <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7fe f9ce 	bl	80011dc <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e03d      	b.n	8002eca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4e:	4b03      	ldr	r3, [pc, #12]	@ (8002e5c <HAL_RCC_OscConfig+0x4cc>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f0      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4ac>
 8002e5a:	e035      	b.n	8002ec8 <HAL_RCC_OscConfig+0x538>
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e64:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed4 <HAL_RCC_OscConfig+0x544>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d028      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d121      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d11a      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e94:	4013      	ands	r3, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d111      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eaa:	085b      	lsrs	r3, r3, #1
 8002eac:	3b01      	subs	r3, #1
 8002eae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d107      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e000      	b.n	8002eca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800

08002ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0d0      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef0:	4b6a      	ldr	r3, [pc, #424]	@ (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d910      	bls.n	8002f20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efe:	4b67      	ldr	r3, [pc, #412]	@ (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 020f 	bic.w	r2, r3, #15
 8002f06:	4965      	ldr	r1, [pc, #404]	@ (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0e:	4b63      	ldr	r3, [pc, #396]	@ (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d001      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0b8      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d020      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f38:	4b59      	ldr	r3, [pc, #356]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	4a58      	ldr	r2, [pc, #352]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f50:	4b53      	ldr	r3, [pc, #332]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	4a52      	ldr	r2, [pc, #328]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f5c:	4b50      	ldr	r3, [pc, #320]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	494d      	ldr	r1, [pc, #308]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d040      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d107      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f82:	4b47      	ldr	r3, [pc, #284]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d115      	bne.n	8002fba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e07f      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d107      	bne.n	8002faa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9a:	4b41      	ldr	r3, [pc, #260]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e073      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002faa:	4b3d      	ldr	r3, [pc, #244]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e06b      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fba:	4b39      	ldr	r3, [pc, #228]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f023 0203 	bic.w	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4936      	ldr	r1, [pc, #216]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fcc:	f7fe f906 	bl	80011dc <HAL_GetTick>
 8002fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd2:	e00a      	b.n	8002fea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd4:	f7fe f902 	bl	80011dc <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e053      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fea:	4b2d      	ldr	r3, [pc, #180]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 020c 	and.w	r2, r3, #12
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d1eb      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b27      	ldr	r3, [pc, #156]	@ (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d210      	bcs.n	800302c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b24      	ldr	r3, [pc, #144]	@ (800309c <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 020f 	bic.w	r2, r3, #15
 8003012:	4922      	ldr	r1, [pc, #136]	@ (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301a:	4b20      	ldr	r3, [pc, #128]	@ (800309c <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d001      	beq.n	800302c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e032      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003038:	4b19      	ldr	r3, [pc, #100]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	4916      	ldr	r1, [pc, #88]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003046:	4313      	orrs	r3, r2
 8003048:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d009      	beq.n	800306a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003056:	4b12      	ldr	r3, [pc, #72]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	490e      	ldr	r1, [pc, #56]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800306a:	f000 f821 	bl	80030b0 <HAL_RCC_GetSysClockFreq>
 800306e:	4602      	mov	r2, r0
 8003070:	4b0b      	ldr	r3, [pc, #44]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	490a      	ldr	r1, [pc, #40]	@ (80030a4 <HAL_RCC_ClockConfig+0x1cc>)
 800307c:	5ccb      	ldrb	r3, [r1, r3]
 800307e:	fa22 f303 	lsr.w	r3, r2, r3
 8003082:	4a09      	ldr	r2, [pc, #36]	@ (80030a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003086:	4b09      	ldr	r3, [pc, #36]	@ (80030ac <HAL_RCC_ClockConfig+0x1d4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe f862 	bl	8001154 <HAL_InitTick>

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40023c00 	.word	0x40023c00
 80030a0:	40023800 	.word	0x40023800
 80030a4:	08004eb0 	.word	0x08004eb0
 80030a8:	20000014 	.word	0x20000014
 80030ac:	20000018 	.word	0x20000018

080030b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b4:	b094      	sub	sp, #80	@ 0x50
 80030b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80030bc:	2300      	movs	r3, #0
 80030be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030c0:	2300      	movs	r3, #0
 80030c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030c8:	4b79      	ldr	r3, [pc, #484]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d00d      	beq.n	80030f0 <HAL_RCC_GetSysClockFreq+0x40>
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	f200 80e1 	bhi.w	800329c <HAL_RCC_GetSysClockFreq+0x1ec>
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x34>
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d003      	beq.n	80030ea <HAL_RCC_GetSysClockFreq+0x3a>
 80030e2:	e0db      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030e4:	4b73      	ldr	r3, [pc, #460]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80030e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030e8:	e0db      	b.n	80032a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030ea:	4b73      	ldr	r3, [pc, #460]	@ (80032b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80030ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030ee:	e0d8      	b.n	80032a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030f0:	4b6f      	ldr	r3, [pc, #444]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80030fa:	4b6d      	ldr	r3, [pc, #436]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d063      	beq.n	80031ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003106:	4b6a      	ldr	r3, [pc, #424]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	099b      	lsrs	r3, r3, #6
 800310c:	2200      	movs	r2, #0
 800310e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003110:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003118:	633b      	str	r3, [r7, #48]	@ 0x30
 800311a:	2300      	movs	r3, #0
 800311c:	637b      	str	r3, [r7, #52]	@ 0x34
 800311e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003122:	4622      	mov	r2, r4
 8003124:	462b      	mov	r3, r5
 8003126:	f04f 0000 	mov.w	r0, #0
 800312a:	f04f 0100 	mov.w	r1, #0
 800312e:	0159      	lsls	r1, r3, #5
 8003130:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003134:	0150      	lsls	r0, r2, #5
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	4621      	mov	r1, r4
 800313c:	1a51      	subs	r1, r2, r1
 800313e:	6139      	str	r1, [r7, #16]
 8003140:	4629      	mov	r1, r5
 8003142:	eb63 0301 	sbc.w	r3, r3, r1
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003154:	4659      	mov	r1, fp
 8003156:	018b      	lsls	r3, r1, #6
 8003158:	4651      	mov	r1, sl
 800315a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800315e:	4651      	mov	r1, sl
 8003160:	018a      	lsls	r2, r1, #6
 8003162:	4651      	mov	r1, sl
 8003164:	ebb2 0801 	subs.w	r8, r2, r1
 8003168:	4659      	mov	r1, fp
 800316a:	eb63 0901 	sbc.w	r9, r3, r1
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800317a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800317e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003182:	4690      	mov	r8, r2
 8003184:	4699      	mov	r9, r3
 8003186:	4623      	mov	r3, r4
 8003188:	eb18 0303 	adds.w	r3, r8, r3
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	462b      	mov	r3, r5
 8003190:	eb49 0303 	adc.w	r3, r9, r3
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031a2:	4629      	mov	r1, r5
 80031a4:	024b      	lsls	r3, r1, #9
 80031a6:	4621      	mov	r1, r4
 80031a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031ac:	4621      	mov	r1, r4
 80031ae:	024a      	lsls	r2, r1, #9
 80031b0:	4610      	mov	r0, r2
 80031b2:	4619      	mov	r1, r3
 80031b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031b6:	2200      	movs	r2, #0
 80031b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031c0:	f7fd f82a 	bl	8000218 <__aeabi_uldivmod>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4613      	mov	r3, r2
 80031ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031cc:	e058      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ce:	4b38      	ldr	r3, [pc, #224]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	099b      	lsrs	r3, r3, #6
 80031d4:	2200      	movs	r2, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	4611      	mov	r1, r2
 80031da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031de:	623b      	str	r3, [r7, #32]
 80031e0:	2300      	movs	r3, #0
 80031e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80031e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031e8:	4642      	mov	r2, r8
 80031ea:	464b      	mov	r3, r9
 80031ec:	f04f 0000 	mov.w	r0, #0
 80031f0:	f04f 0100 	mov.w	r1, #0
 80031f4:	0159      	lsls	r1, r3, #5
 80031f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031fa:	0150      	lsls	r0, r2, #5
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4641      	mov	r1, r8
 8003202:	ebb2 0a01 	subs.w	sl, r2, r1
 8003206:	4649      	mov	r1, r9
 8003208:	eb63 0b01 	sbc.w	fp, r3, r1
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003218:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800321c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003220:	ebb2 040a 	subs.w	r4, r2, sl
 8003224:	eb63 050b 	sbc.w	r5, r3, fp
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	00eb      	lsls	r3, r5, #3
 8003232:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003236:	00e2      	lsls	r2, r4, #3
 8003238:	4614      	mov	r4, r2
 800323a:	461d      	mov	r5, r3
 800323c:	4643      	mov	r3, r8
 800323e:	18e3      	adds	r3, r4, r3
 8003240:	603b      	str	r3, [r7, #0]
 8003242:	464b      	mov	r3, r9
 8003244:	eb45 0303 	adc.w	r3, r5, r3
 8003248:	607b      	str	r3, [r7, #4]
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003256:	4629      	mov	r1, r5
 8003258:	028b      	lsls	r3, r1, #10
 800325a:	4621      	mov	r1, r4
 800325c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003260:	4621      	mov	r1, r4
 8003262:	028a      	lsls	r2, r1, #10
 8003264:	4610      	mov	r0, r2
 8003266:	4619      	mov	r1, r3
 8003268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800326a:	2200      	movs	r2, #0
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	61fa      	str	r2, [r7, #28]
 8003270:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003274:	f7fc ffd0 	bl	8000218 <__aeabi_uldivmod>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4613      	mov	r3, r2
 800327e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003280:	4b0b      	ldr	r3, [pc, #44]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	0c1b      	lsrs	r3, r3, #16
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	3301      	adds	r3, #1
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003290:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003294:	fbb2 f3f3 	udiv	r3, r2, r3
 8003298:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800329a:	e002      	b.n	80032a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800329c:	4b05      	ldr	r3, [pc, #20]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800329e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3750      	adds	r7, #80	@ 0x50
 80032a8:	46bd      	mov	sp, r7
 80032aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800
 80032b4:	00f42400 	.word	0x00f42400
 80032b8:	007a1200 	.word	0x007a1200

080032bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c0:	4b03      	ldr	r3, [pc, #12]	@ (80032d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032c2:	681b      	ldr	r3, [r3, #0]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	20000014 	.word	0x20000014

080032d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032d8:	f7ff fff0 	bl	80032bc <HAL_RCC_GetHCLKFreq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b05      	ldr	r3, [pc, #20]	@ (80032f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	0a9b      	lsrs	r3, r3, #10
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	4903      	ldr	r1, [pc, #12]	@ (80032f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40023800 	.word	0x40023800
 80032f8:	08004ec0 	.word	0x08004ec0

080032fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003300:	f7ff ffdc 	bl	80032bc <HAL_RCC_GetHCLKFreq>
 8003304:	4602      	mov	r2, r0
 8003306:	4b05      	ldr	r3, [pc, #20]	@ (800331c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	0b5b      	lsrs	r3, r3, #13
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	4903      	ldr	r1, [pc, #12]	@ (8003320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003312:	5ccb      	ldrb	r3, [r1, r3]
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003318:	4618      	mov	r0, r3
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40023800 	.word	0x40023800
 8003320:	08004ec0 	.word	0x08004ec0

08003324 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d012      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800334c:	4b69      	ldr	r3, [pc, #420]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	4a68      	ldr	r2, [pc, #416]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003352:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003356:	6093      	str	r3, [r2, #8]
 8003358:	4b66      	ldr	r3, [pc, #408]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003360:	4964      	ldr	r1, [pc, #400]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800336e:	2301      	movs	r3, #1
 8003370:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d017      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800337e:	4b5d      	ldr	r3, [pc, #372]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003380:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003384:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800338c:	4959      	ldr	r1, [pc, #356]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003398:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800339c:	d101      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800339e:	2301      	movs	r3, #1
 80033a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80033aa:	2301      	movs	r3, #1
 80033ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d017      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033ba:	4b4e      	ldr	r3, [pc, #312]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c8:	494a      	ldr	r1, [pc, #296]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033d8:	d101      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80033da:	2301      	movs	r3, #1
 80033dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80033e6:	2301      	movs	r3, #1
 80033e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80033f6:	2301      	movs	r3, #1
 80033f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0320 	and.w	r3, r3, #32
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 808b 	beq.w	800351e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003408:	4b3a      	ldr	r3, [pc, #232]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340c:	4a39      	ldr	r2, [pc, #228]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003412:	6413      	str	r3, [r2, #64]	@ 0x40
 8003414:	4b37      	ldr	r3, [pc, #220]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003418:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003420:	4b35      	ldr	r3, [pc, #212]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a34      	ldr	r2, [pc, #208]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003426:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800342a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800342c:	f7fd fed6 	bl	80011dc <HAL_GetTick>
 8003430:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003434:	f7fd fed2 	bl	80011dc <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	@ 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e357      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003446:	4b2c      	ldr	r3, [pc, #176]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003452:	4b28      	ldr	r3, [pc, #160]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003456:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800345a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d035      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003466:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	429a      	cmp	r2, r3
 800346e:	d02e      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003470:	4b20      	ldr	r3, [pc, #128]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003474:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003478:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800347a:	4b1e      	ldr	r3, [pc, #120]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347e:	4a1d      	ldr	r2, [pc, #116]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003484:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003486:	4b1b      	ldr	r3, [pc, #108]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348a:	4a1a      	ldr	r2, [pc, #104]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003490:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003492:	4a18      	ldr	r2, [pc, #96]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003498:	4b16      	ldr	r3, [pc, #88]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d114      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fd fe9a 	bl	80011dc <HAL_GetTick>
 80034a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034aa:	e00a      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ac:	f7fd fe96 	bl	80011dc <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e319      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c2:	4b0c      	ldr	r3, [pc, #48]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0ee      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034da:	d111      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80034dc:	4b05      	ldr	r3, [pc, #20]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034e8:	4b04      	ldr	r3, [pc, #16]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034ea:	400b      	ands	r3, r1
 80034ec:	4901      	ldr	r1, [pc, #4]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	608b      	str	r3, [r1, #8]
 80034f2:	e00b      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40007000 	.word	0x40007000
 80034fc:	0ffffcff 	.word	0x0ffffcff
 8003500:	4baa      	ldr	r3, [pc, #680]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4aa9      	ldr	r2, [pc, #676]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003506:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800350a:	6093      	str	r3, [r2, #8]
 800350c:	4ba7      	ldr	r3, [pc, #668]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800350e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003518:	49a4      	ldr	r1, [pc, #656]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800351a:	4313      	orrs	r3, r2
 800351c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b00      	cmp	r3, #0
 8003528:	d010      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800352a:	4ba0      	ldr	r3, [pc, #640]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800352c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003530:	4a9e      	ldr	r2, [pc, #632]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003532:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003536:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800353a:	4b9c      	ldr	r3, [pc, #624]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800353c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003544:	4999      	ldr	r1, [pc, #612]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003558:	4b94      	ldr	r3, [pc, #592]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800355a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003566:	4991      	ldr	r1, [pc, #580]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800357a:	4b8c      	ldr	r3, [pc, #560]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800357c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003580:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003588:	4988      	ldr	r1, [pc, #544]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00a      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800359c:	4b83      	ldr	r3, [pc, #524]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035aa:	4980      	ldr	r1, [pc, #512]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035be:	4b7b      	ldr	r3, [pc, #492]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035cc:	4977      	ldr	r1, [pc, #476]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035e0:	4b72      	ldr	r3, [pc, #456]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e6:	f023 0203 	bic.w	r2, r3, #3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	496f      	ldr	r1, [pc, #444]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003602:	4b6a      	ldr	r3, [pc, #424]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003608:	f023 020c 	bic.w	r2, r3, #12
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003610:	4966      	ldr	r1, [pc, #408]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003624:	4b61      	ldr	r3, [pc, #388]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003632:	495e      	ldr	r1, [pc, #376]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003646:	4b59      	ldr	r3, [pc, #356]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003654:	4955      	ldr	r1, [pc, #340]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003668:	4b50      	ldr	r3, [pc, #320]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800366e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003676:	494d      	ldr	r1, [pc, #308]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800368a:	4b48      	ldr	r3, [pc, #288]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800368c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003690:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003698:	4944      	ldr	r1, [pc, #272]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036ac:	4b3f      	ldr	r3, [pc, #252]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ba:	493c      	ldr	r1, [pc, #240]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80036ce:	4b37      	ldr	r3, [pc, #220]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036dc:	4933      	ldr	r1, [pc, #204]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036f0:	4b2e      	ldr	r3, [pc, #184]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036fe:	492b      	ldr	r1, [pc, #172]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d011      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003712:	4b26      	ldr	r3, [pc, #152]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003718:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003720:	4922      	ldr	r1, [pc, #136]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800372c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003730:	d101      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003732:	2301      	movs	r3, #1
 8003734:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003742:	2301      	movs	r3, #1
 8003744:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003752:	4b16      	ldr	r3, [pc, #88]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003758:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003760:	4912      	ldr	r1, [pc, #72]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00b      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003774:	4b0d      	ldr	r3, [pc, #52]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800377a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003784:	4909      	ldr	r1, [pc, #36]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d006      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 80d9 	beq.w	8003952 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a01      	ldr	r2, [pc, #4]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037aa:	e001      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80037ac:	40023800 	.word	0x40023800
 80037b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b2:	f7fd fd13 	bl	80011dc <HAL_GetTick>
 80037b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037b8:	e008      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037ba:	f7fd fd0f 	bl	80011dc <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b64      	cmp	r3, #100	@ 0x64
 80037c6:	d901      	bls.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e194      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1f0      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d021      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d11d      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037ec:	4b64      	ldr	r3, [pc, #400]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037f2:	0c1b      	lsrs	r3, r3, #16
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037fa:	4b61      	ldr	r3, [pc, #388]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003800:	0e1b      	lsrs	r3, r3, #24
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	019a      	lsls	r2, r3, #6
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	041b      	lsls	r3, r3, #16
 8003812:	431a      	orrs	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	061b      	lsls	r3, r3, #24
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	071b      	lsls	r3, r3, #28
 8003820:	4957      	ldr	r1, [pc, #348]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d004      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003838:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800383c:	d00a      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003846:	2b00      	cmp	r3, #0
 8003848:	d02e      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003852:	d129      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003854:	4b4a      	ldr	r3, [pc, #296]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003856:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800385a:	0c1b      	lsrs	r3, r3, #16
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003862:	4b47      	ldr	r3, [pc, #284]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003864:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003868:	0f1b      	lsrs	r3, r3, #28
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	019a      	lsls	r2, r3, #6
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	041b      	lsls	r3, r3, #16
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	061b      	lsls	r3, r3, #24
 8003882:	431a      	orrs	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	071b      	lsls	r3, r3, #28
 8003888:	493d      	ldr	r1, [pc, #244]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003890:	4b3b      	ldr	r3, [pc, #236]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003892:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003896:	f023 021f 	bic.w	r2, r3, #31
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389e:	3b01      	subs	r3, #1
 80038a0:	4937      	ldr	r1, [pc, #220]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d01d      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038b4:	4b32      	ldr	r3, [pc, #200]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ba:	0e1b      	lsrs	r3, r3, #24
 80038bc:	f003 030f 	and.w	r3, r3, #15
 80038c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038c2:	4b2f      	ldr	r3, [pc, #188]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038c8:	0f1b      	lsrs	r3, r3, #28
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	019a      	lsls	r2, r3, #6
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	041b      	lsls	r3, r3, #16
 80038dc:	431a      	orrs	r2, r3
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	061b      	lsls	r3, r3, #24
 80038e2:	431a      	orrs	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	071b      	lsls	r3, r3, #28
 80038e8:	4925      	ldr	r1, [pc, #148]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d011      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	019a      	lsls	r2, r3, #6
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	041b      	lsls	r3, r3, #16
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	061b      	lsls	r3, r3, #24
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	071b      	lsls	r3, r3, #28
 8003918:	4919      	ldr	r1, [pc, #100]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003920:	4b17      	ldr	r3, [pc, #92]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a16      	ldr	r2, [pc, #88]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003926:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800392a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800392c:	f7fd fc56 	bl	80011dc <HAL_GetTick>
 8003930:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003934:	f7fd fc52 	bl	80011dc <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b64      	cmp	r3, #100	@ 0x64
 8003940:	d901      	bls.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e0d7      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003946:	4b0e      	ldr	r3, [pc, #56]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	2b01      	cmp	r3, #1
 8003956:	f040 80cd 	bne.w	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800395a:	4b09      	ldr	r3, [pc, #36]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a08      	ldr	r2, [pc, #32]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003960:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003966:	f7fd fc39 	bl	80011dc <HAL_GetTick>
 800396a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800396c:	e00a      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800396e:	f7fd fc35 	bl	80011dc <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b64      	cmp	r3, #100	@ 0x64
 800397a:	d903      	bls.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e0ba      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003980:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003984:	4b5e      	ldr	r3, [pc, #376]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800398c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003990:	d0ed      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d009      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d02e      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d12a      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039ba:	4b51      	ldr	r3, [pc, #324]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c0:	0c1b      	lsrs	r3, r3, #16
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ce:	0f1b      	lsrs	r3, r3, #28
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	019a      	lsls	r2, r3, #6
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	041b      	lsls	r3, r3, #16
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	061b      	lsls	r3, r3, #24
 80039e8:	431a      	orrs	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	071b      	lsls	r3, r3, #28
 80039ee:	4944      	ldr	r1, [pc, #272]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80039f6:	4b42      	ldr	r3, [pc, #264]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039fc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a04:	3b01      	subs	r3, #1
 8003a06:	021b      	lsls	r3, r3, #8
 8003a08:	493d      	ldr	r1, [pc, #244]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d022      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a24:	d11d      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a26:	4b36      	ldr	r3, [pc, #216]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a2c:	0e1b      	lsrs	r3, r3, #24
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a34:	4b32      	ldr	r3, [pc, #200]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3a:	0f1b      	lsrs	r3, r3, #28
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	019a      	lsls	r2, r3, #6
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	041b      	lsls	r3, r3, #16
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	061b      	lsls	r3, r3, #24
 8003a54:	431a      	orrs	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	071b      	lsls	r3, r3, #28
 8003a5a:	4929      	ldr	r1, [pc, #164]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d028      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a6e:	4b24      	ldr	r3, [pc, #144]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a74:	0e1b      	lsrs	r3, r3, #24
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a7c:	4b20      	ldr	r3, [pc, #128]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a82:	0c1b      	lsrs	r3, r3, #16
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	019a      	lsls	r2, r3, #6
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	041b      	lsls	r3, r3, #16
 8003a94:	431a      	orrs	r2, r3
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	061b      	lsls	r3, r3, #24
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	071b      	lsls	r3, r3, #28
 8003aa2:	4917      	ldr	r1, [pc, #92]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003aaa:	4b15      	ldr	r3, [pc, #84]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ab0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab8:	4911      	ldr	r1, [pc, #68]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a0e      	ldr	r2, [pc, #56]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003acc:	f7fd fb86 	bl	80011dc <HAL_GetTick>
 8003ad0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ad4:	f7fd fb82 	bl	80011dc <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b64      	cmp	r3, #100	@ 0x64
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e007      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ae6:	4b06      	ldr	r3, [pc, #24]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003aee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003af2:	d1ef      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40023800 	.word	0x40023800

08003b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e049      	b.n	8003baa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fd f9a0 	bl	8000e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3304      	adds	r3, #4
 8003b40:	4619      	mov	r1, r3
 8003b42:	4610      	mov	r0, r2
 8003b44:	f000 f8ce 	bl	8003ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d001      	beq.n	8003bcc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e04c      	b.n	8003c66 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a26      	ldr	r2, [pc, #152]	@ (8003c74 <HAL_TIM_Base_Start+0xc0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d022      	beq.n	8003c24 <HAL_TIM_Base_Start+0x70>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003be6:	d01d      	beq.n	8003c24 <HAL_TIM_Base_Start+0x70>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a22      	ldr	r2, [pc, #136]	@ (8003c78 <HAL_TIM_Base_Start+0xc4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d018      	beq.n	8003c24 <HAL_TIM_Base_Start+0x70>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a21      	ldr	r2, [pc, #132]	@ (8003c7c <HAL_TIM_Base_Start+0xc8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d013      	beq.n	8003c24 <HAL_TIM_Base_Start+0x70>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a1f      	ldr	r2, [pc, #124]	@ (8003c80 <HAL_TIM_Base_Start+0xcc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00e      	beq.n	8003c24 <HAL_TIM_Base_Start+0x70>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8003c84 <HAL_TIM_Base_Start+0xd0>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d009      	beq.n	8003c24 <HAL_TIM_Base_Start+0x70>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a1c      	ldr	r2, [pc, #112]	@ (8003c88 <HAL_TIM_Base_Start+0xd4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d004      	beq.n	8003c24 <HAL_TIM_Base_Start+0x70>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8003c8c <HAL_TIM_Base_Start+0xd8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d115      	bne.n	8003c50 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	4b19      	ldr	r3, [pc, #100]	@ (8003c90 <HAL_TIM_Base_Start+0xdc>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b06      	cmp	r3, #6
 8003c34:	d015      	beq.n	8003c62 <HAL_TIM_Base_Start+0xae>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c3c:	d011      	beq.n	8003c62 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0201 	orr.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c4e:	e008      	b.n	8003c62 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	e000      	b.n	8003c64 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40010000 	.word	0x40010000
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	40000800 	.word	0x40000800
 8003c80:	40000c00 	.word	0x40000c00
 8003c84:	40010400 	.word	0x40010400
 8003c88:	40014000 	.word	0x40014000
 8003c8c:	40001800 	.word	0x40001800
 8003c90:	00010007 	.word	0x00010007

08003c94 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6a1a      	ldr	r2, [r3, #32]
 8003ca2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10f      	bne.n	8003ccc <HAL_TIM_Base_Stop+0x38>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6a1a      	ldr	r2, [r3, #32]
 8003cb2:	f240 4344 	movw	r3, #1092	@ 0x444
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d107      	bne.n	8003ccc <HAL_TIM_Base_Stop+0x38>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0201 	bic.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
	...

08003ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a46      	ldr	r2, [pc, #280]	@ (8003e10 <TIM_Base_SetConfig+0x12c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d013      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d02:	d00f      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a43      	ldr	r2, [pc, #268]	@ (8003e14 <TIM_Base_SetConfig+0x130>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00b      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a42      	ldr	r2, [pc, #264]	@ (8003e18 <TIM_Base_SetConfig+0x134>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d007      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a41      	ldr	r2, [pc, #260]	@ (8003e1c <TIM_Base_SetConfig+0x138>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a40      	ldr	r2, [pc, #256]	@ (8003e20 <TIM_Base_SetConfig+0x13c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d108      	bne.n	8003d36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a35      	ldr	r2, [pc, #212]	@ (8003e10 <TIM_Base_SetConfig+0x12c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d02b      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d44:	d027      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a32      	ldr	r2, [pc, #200]	@ (8003e14 <TIM_Base_SetConfig+0x130>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d023      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a31      	ldr	r2, [pc, #196]	@ (8003e18 <TIM_Base_SetConfig+0x134>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d01f      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a30      	ldr	r2, [pc, #192]	@ (8003e1c <TIM_Base_SetConfig+0x138>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d01b      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a2f      	ldr	r2, [pc, #188]	@ (8003e20 <TIM_Base_SetConfig+0x13c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d017      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a2e      	ldr	r2, [pc, #184]	@ (8003e24 <TIM_Base_SetConfig+0x140>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d013      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a2d      	ldr	r2, [pc, #180]	@ (8003e28 <TIM_Base_SetConfig+0x144>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00f      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a2c      	ldr	r2, [pc, #176]	@ (8003e2c <TIM_Base_SetConfig+0x148>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00b      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a2b      	ldr	r2, [pc, #172]	@ (8003e30 <TIM_Base_SetConfig+0x14c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d007      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a2a      	ldr	r2, [pc, #168]	@ (8003e34 <TIM_Base_SetConfig+0x150>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d003      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a29      	ldr	r2, [pc, #164]	@ (8003e38 <TIM_Base_SetConfig+0x154>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d108      	bne.n	8003da8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a10      	ldr	r2, [pc, #64]	@ (8003e10 <TIM_Base_SetConfig+0x12c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d003      	beq.n	8003ddc <TIM_Base_SetConfig+0xf8>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a12      	ldr	r2, [pc, #72]	@ (8003e20 <TIM_Base_SetConfig+0x13c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d103      	bne.n	8003de4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d105      	bne.n	8003e02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f023 0201 	bic.w	r2, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	611a      	str	r2, [r3, #16]
  }
}
 8003e02:	bf00      	nop
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40010000 	.word	0x40010000
 8003e14:	40000400 	.word	0x40000400
 8003e18:	40000800 	.word	0x40000800
 8003e1c:	40000c00 	.word	0x40000c00
 8003e20:	40010400 	.word	0x40010400
 8003e24:	40014000 	.word	0x40014000
 8003e28:	40014400 	.word	0x40014400
 8003e2c:	40014800 	.word	0x40014800
 8003e30:	40001800 	.word	0x40001800
 8003e34:	40001c00 	.word	0x40001c00
 8003e38:	40002000 	.word	0x40002000

08003e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e06d      	b.n	8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a30      	ldr	r2, [pc, #192]	@ (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d004      	beq.n	8003e88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a2f      	ldr	r2, [pc, #188]	@ (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d108      	bne.n	8003e9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003e8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ea0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a20      	ldr	r2, [pc, #128]	@ (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d022      	beq.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ec6:	d01d      	beq.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d018      	beq.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8003f48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d013      	beq.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8003f4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00e      	beq.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a15      	ldr	r2, [pc, #84]	@ (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d009      	beq.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a16      	ldr	r2, [pc, #88]	@ (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d004      	beq.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a15      	ldr	r2, [pc, #84]	@ (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d10c      	bne.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40010400 	.word	0x40010400
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40000c00 	.word	0x40000c00
 8003f50:	40014000 	.word	0x40014000
 8003f54:	40001800 	.word	0x40001800

08003f58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e040      	b.n	8003fec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fc ff98 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2224      	movs	r2, #36	@ 0x24
 8003f84:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0201 	bic.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fa8c 	bl	80044bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f825 	bl	8003ff4 <UART_SetConfig>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e01b      	b.n	8003fec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0201 	orr.w	r2, r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 fb0b 	bl	8004600 <UART_CheckIdleState>
 8003fea:	4603      	mov	r3, r0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	4313      	orrs	r3, r2
 8004016:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4ba6      	ldr	r3, [pc, #664]	@ (80042b8 <UART_SetConfig+0x2c4>)
 8004020:	4013      	ands	r3, r2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6812      	ldr	r2, [r2, #0]
 8004026:	6979      	ldr	r1, [r7, #20]
 8004028:	430b      	orrs	r3, r1
 800402a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	430a      	orrs	r2, r1
 8004064:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a94      	ldr	r2, [pc, #592]	@ (80042bc <UART_SetConfig+0x2c8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d120      	bne.n	80040b2 <UART_SetConfig+0xbe>
 8004070:	4b93      	ldr	r3, [pc, #588]	@ (80042c0 <UART_SetConfig+0x2cc>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	2b03      	cmp	r3, #3
 800407c:	d816      	bhi.n	80040ac <UART_SetConfig+0xb8>
 800407e:	a201      	add	r2, pc, #4	@ (adr r2, 8004084 <UART_SetConfig+0x90>)
 8004080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004084:	08004095 	.word	0x08004095
 8004088:	080040a1 	.word	0x080040a1
 800408c:	0800409b 	.word	0x0800409b
 8004090:	080040a7 	.word	0x080040a7
 8004094:	2301      	movs	r3, #1
 8004096:	77fb      	strb	r3, [r7, #31]
 8004098:	e150      	b.n	800433c <UART_SetConfig+0x348>
 800409a:	2302      	movs	r3, #2
 800409c:	77fb      	strb	r3, [r7, #31]
 800409e:	e14d      	b.n	800433c <UART_SetConfig+0x348>
 80040a0:	2304      	movs	r3, #4
 80040a2:	77fb      	strb	r3, [r7, #31]
 80040a4:	e14a      	b.n	800433c <UART_SetConfig+0x348>
 80040a6:	2308      	movs	r3, #8
 80040a8:	77fb      	strb	r3, [r7, #31]
 80040aa:	e147      	b.n	800433c <UART_SetConfig+0x348>
 80040ac:	2310      	movs	r3, #16
 80040ae:	77fb      	strb	r3, [r7, #31]
 80040b0:	e144      	b.n	800433c <UART_SetConfig+0x348>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a83      	ldr	r2, [pc, #524]	@ (80042c4 <UART_SetConfig+0x2d0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d132      	bne.n	8004122 <UART_SetConfig+0x12e>
 80040bc:	4b80      	ldr	r3, [pc, #512]	@ (80042c0 <UART_SetConfig+0x2cc>)
 80040be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c2:	f003 030c 	and.w	r3, r3, #12
 80040c6:	2b0c      	cmp	r3, #12
 80040c8:	d828      	bhi.n	800411c <UART_SetConfig+0x128>
 80040ca:	a201      	add	r2, pc, #4	@ (adr r2, 80040d0 <UART_SetConfig+0xdc>)
 80040cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d0:	08004105 	.word	0x08004105
 80040d4:	0800411d 	.word	0x0800411d
 80040d8:	0800411d 	.word	0x0800411d
 80040dc:	0800411d 	.word	0x0800411d
 80040e0:	08004111 	.word	0x08004111
 80040e4:	0800411d 	.word	0x0800411d
 80040e8:	0800411d 	.word	0x0800411d
 80040ec:	0800411d 	.word	0x0800411d
 80040f0:	0800410b 	.word	0x0800410b
 80040f4:	0800411d 	.word	0x0800411d
 80040f8:	0800411d 	.word	0x0800411d
 80040fc:	0800411d 	.word	0x0800411d
 8004100:	08004117 	.word	0x08004117
 8004104:	2300      	movs	r3, #0
 8004106:	77fb      	strb	r3, [r7, #31]
 8004108:	e118      	b.n	800433c <UART_SetConfig+0x348>
 800410a:	2302      	movs	r3, #2
 800410c:	77fb      	strb	r3, [r7, #31]
 800410e:	e115      	b.n	800433c <UART_SetConfig+0x348>
 8004110:	2304      	movs	r3, #4
 8004112:	77fb      	strb	r3, [r7, #31]
 8004114:	e112      	b.n	800433c <UART_SetConfig+0x348>
 8004116:	2308      	movs	r3, #8
 8004118:	77fb      	strb	r3, [r7, #31]
 800411a:	e10f      	b.n	800433c <UART_SetConfig+0x348>
 800411c:	2310      	movs	r3, #16
 800411e:	77fb      	strb	r3, [r7, #31]
 8004120:	e10c      	b.n	800433c <UART_SetConfig+0x348>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a68      	ldr	r2, [pc, #416]	@ (80042c8 <UART_SetConfig+0x2d4>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d120      	bne.n	800416e <UART_SetConfig+0x17a>
 800412c:	4b64      	ldr	r3, [pc, #400]	@ (80042c0 <UART_SetConfig+0x2cc>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004132:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004136:	2b30      	cmp	r3, #48	@ 0x30
 8004138:	d013      	beq.n	8004162 <UART_SetConfig+0x16e>
 800413a:	2b30      	cmp	r3, #48	@ 0x30
 800413c:	d814      	bhi.n	8004168 <UART_SetConfig+0x174>
 800413e:	2b20      	cmp	r3, #32
 8004140:	d009      	beq.n	8004156 <UART_SetConfig+0x162>
 8004142:	2b20      	cmp	r3, #32
 8004144:	d810      	bhi.n	8004168 <UART_SetConfig+0x174>
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <UART_SetConfig+0x15c>
 800414a:	2b10      	cmp	r3, #16
 800414c:	d006      	beq.n	800415c <UART_SetConfig+0x168>
 800414e:	e00b      	b.n	8004168 <UART_SetConfig+0x174>
 8004150:	2300      	movs	r3, #0
 8004152:	77fb      	strb	r3, [r7, #31]
 8004154:	e0f2      	b.n	800433c <UART_SetConfig+0x348>
 8004156:	2302      	movs	r3, #2
 8004158:	77fb      	strb	r3, [r7, #31]
 800415a:	e0ef      	b.n	800433c <UART_SetConfig+0x348>
 800415c:	2304      	movs	r3, #4
 800415e:	77fb      	strb	r3, [r7, #31]
 8004160:	e0ec      	b.n	800433c <UART_SetConfig+0x348>
 8004162:	2308      	movs	r3, #8
 8004164:	77fb      	strb	r3, [r7, #31]
 8004166:	e0e9      	b.n	800433c <UART_SetConfig+0x348>
 8004168:	2310      	movs	r3, #16
 800416a:	77fb      	strb	r3, [r7, #31]
 800416c:	e0e6      	b.n	800433c <UART_SetConfig+0x348>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a56      	ldr	r2, [pc, #344]	@ (80042cc <UART_SetConfig+0x2d8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d120      	bne.n	80041ba <UART_SetConfig+0x1c6>
 8004178:	4b51      	ldr	r3, [pc, #324]	@ (80042c0 <UART_SetConfig+0x2cc>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004182:	2bc0      	cmp	r3, #192	@ 0xc0
 8004184:	d013      	beq.n	80041ae <UART_SetConfig+0x1ba>
 8004186:	2bc0      	cmp	r3, #192	@ 0xc0
 8004188:	d814      	bhi.n	80041b4 <UART_SetConfig+0x1c0>
 800418a:	2b80      	cmp	r3, #128	@ 0x80
 800418c:	d009      	beq.n	80041a2 <UART_SetConfig+0x1ae>
 800418e:	2b80      	cmp	r3, #128	@ 0x80
 8004190:	d810      	bhi.n	80041b4 <UART_SetConfig+0x1c0>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <UART_SetConfig+0x1a8>
 8004196:	2b40      	cmp	r3, #64	@ 0x40
 8004198:	d006      	beq.n	80041a8 <UART_SetConfig+0x1b4>
 800419a:	e00b      	b.n	80041b4 <UART_SetConfig+0x1c0>
 800419c:	2300      	movs	r3, #0
 800419e:	77fb      	strb	r3, [r7, #31]
 80041a0:	e0cc      	b.n	800433c <UART_SetConfig+0x348>
 80041a2:	2302      	movs	r3, #2
 80041a4:	77fb      	strb	r3, [r7, #31]
 80041a6:	e0c9      	b.n	800433c <UART_SetConfig+0x348>
 80041a8:	2304      	movs	r3, #4
 80041aa:	77fb      	strb	r3, [r7, #31]
 80041ac:	e0c6      	b.n	800433c <UART_SetConfig+0x348>
 80041ae:	2308      	movs	r3, #8
 80041b0:	77fb      	strb	r3, [r7, #31]
 80041b2:	e0c3      	b.n	800433c <UART_SetConfig+0x348>
 80041b4:	2310      	movs	r3, #16
 80041b6:	77fb      	strb	r3, [r7, #31]
 80041b8:	e0c0      	b.n	800433c <UART_SetConfig+0x348>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a44      	ldr	r2, [pc, #272]	@ (80042d0 <UART_SetConfig+0x2dc>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d125      	bne.n	8004210 <UART_SetConfig+0x21c>
 80041c4:	4b3e      	ldr	r3, [pc, #248]	@ (80042c0 <UART_SetConfig+0x2cc>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041d2:	d017      	beq.n	8004204 <UART_SetConfig+0x210>
 80041d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041d8:	d817      	bhi.n	800420a <UART_SetConfig+0x216>
 80041da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041de:	d00b      	beq.n	80041f8 <UART_SetConfig+0x204>
 80041e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041e4:	d811      	bhi.n	800420a <UART_SetConfig+0x216>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <UART_SetConfig+0x1fe>
 80041ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ee:	d006      	beq.n	80041fe <UART_SetConfig+0x20a>
 80041f0:	e00b      	b.n	800420a <UART_SetConfig+0x216>
 80041f2:	2300      	movs	r3, #0
 80041f4:	77fb      	strb	r3, [r7, #31]
 80041f6:	e0a1      	b.n	800433c <UART_SetConfig+0x348>
 80041f8:	2302      	movs	r3, #2
 80041fa:	77fb      	strb	r3, [r7, #31]
 80041fc:	e09e      	b.n	800433c <UART_SetConfig+0x348>
 80041fe:	2304      	movs	r3, #4
 8004200:	77fb      	strb	r3, [r7, #31]
 8004202:	e09b      	b.n	800433c <UART_SetConfig+0x348>
 8004204:	2308      	movs	r3, #8
 8004206:	77fb      	strb	r3, [r7, #31]
 8004208:	e098      	b.n	800433c <UART_SetConfig+0x348>
 800420a:	2310      	movs	r3, #16
 800420c:	77fb      	strb	r3, [r7, #31]
 800420e:	e095      	b.n	800433c <UART_SetConfig+0x348>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a2f      	ldr	r2, [pc, #188]	@ (80042d4 <UART_SetConfig+0x2e0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d125      	bne.n	8004266 <UART_SetConfig+0x272>
 800421a:	4b29      	ldr	r3, [pc, #164]	@ (80042c0 <UART_SetConfig+0x2cc>)
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004220:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004224:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004228:	d017      	beq.n	800425a <UART_SetConfig+0x266>
 800422a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800422e:	d817      	bhi.n	8004260 <UART_SetConfig+0x26c>
 8004230:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004234:	d00b      	beq.n	800424e <UART_SetConfig+0x25a>
 8004236:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800423a:	d811      	bhi.n	8004260 <UART_SetConfig+0x26c>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <UART_SetConfig+0x254>
 8004240:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004244:	d006      	beq.n	8004254 <UART_SetConfig+0x260>
 8004246:	e00b      	b.n	8004260 <UART_SetConfig+0x26c>
 8004248:	2301      	movs	r3, #1
 800424a:	77fb      	strb	r3, [r7, #31]
 800424c:	e076      	b.n	800433c <UART_SetConfig+0x348>
 800424e:	2302      	movs	r3, #2
 8004250:	77fb      	strb	r3, [r7, #31]
 8004252:	e073      	b.n	800433c <UART_SetConfig+0x348>
 8004254:	2304      	movs	r3, #4
 8004256:	77fb      	strb	r3, [r7, #31]
 8004258:	e070      	b.n	800433c <UART_SetConfig+0x348>
 800425a:	2308      	movs	r3, #8
 800425c:	77fb      	strb	r3, [r7, #31]
 800425e:	e06d      	b.n	800433c <UART_SetConfig+0x348>
 8004260:	2310      	movs	r3, #16
 8004262:	77fb      	strb	r3, [r7, #31]
 8004264:	e06a      	b.n	800433c <UART_SetConfig+0x348>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a1b      	ldr	r2, [pc, #108]	@ (80042d8 <UART_SetConfig+0x2e4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d138      	bne.n	80042e2 <UART_SetConfig+0x2ee>
 8004270:	4b13      	ldr	r3, [pc, #76]	@ (80042c0 <UART_SetConfig+0x2cc>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004276:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800427a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800427e:	d017      	beq.n	80042b0 <UART_SetConfig+0x2bc>
 8004280:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004284:	d82a      	bhi.n	80042dc <UART_SetConfig+0x2e8>
 8004286:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800428a:	d00b      	beq.n	80042a4 <UART_SetConfig+0x2b0>
 800428c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004290:	d824      	bhi.n	80042dc <UART_SetConfig+0x2e8>
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <UART_SetConfig+0x2aa>
 8004296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800429a:	d006      	beq.n	80042aa <UART_SetConfig+0x2b6>
 800429c:	e01e      	b.n	80042dc <UART_SetConfig+0x2e8>
 800429e:	2300      	movs	r3, #0
 80042a0:	77fb      	strb	r3, [r7, #31]
 80042a2:	e04b      	b.n	800433c <UART_SetConfig+0x348>
 80042a4:	2302      	movs	r3, #2
 80042a6:	77fb      	strb	r3, [r7, #31]
 80042a8:	e048      	b.n	800433c <UART_SetConfig+0x348>
 80042aa:	2304      	movs	r3, #4
 80042ac:	77fb      	strb	r3, [r7, #31]
 80042ae:	e045      	b.n	800433c <UART_SetConfig+0x348>
 80042b0:	2308      	movs	r3, #8
 80042b2:	77fb      	strb	r3, [r7, #31]
 80042b4:	e042      	b.n	800433c <UART_SetConfig+0x348>
 80042b6:	bf00      	nop
 80042b8:	efff69f3 	.word	0xefff69f3
 80042bc:	40011000 	.word	0x40011000
 80042c0:	40023800 	.word	0x40023800
 80042c4:	40004400 	.word	0x40004400
 80042c8:	40004800 	.word	0x40004800
 80042cc:	40004c00 	.word	0x40004c00
 80042d0:	40005000 	.word	0x40005000
 80042d4:	40011400 	.word	0x40011400
 80042d8:	40007800 	.word	0x40007800
 80042dc:	2310      	movs	r3, #16
 80042de:	77fb      	strb	r3, [r7, #31]
 80042e0:	e02c      	b.n	800433c <UART_SetConfig+0x348>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a72      	ldr	r2, [pc, #456]	@ (80044b0 <UART_SetConfig+0x4bc>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d125      	bne.n	8004338 <UART_SetConfig+0x344>
 80042ec:	4b71      	ldr	r3, [pc, #452]	@ (80044b4 <UART_SetConfig+0x4c0>)
 80042ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80042f6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80042fa:	d017      	beq.n	800432c <UART_SetConfig+0x338>
 80042fc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004300:	d817      	bhi.n	8004332 <UART_SetConfig+0x33e>
 8004302:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004306:	d00b      	beq.n	8004320 <UART_SetConfig+0x32c>
 8004308:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800430c:	d811      	bhi.n	8004332 <UART_SetConfig+0x33e>
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <UART_SetConfig+0x326>
 8004312:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004316:	d006      	beq.n	8004326 <UART_SetConfig+0x332>
 8004318:	e00b      	b.n	8004332 <UART_SetConfig+0x33e>
 800431a:	2300      	movs	r3, #0
 800431c:	77fb      	strb	r3, [r7, #31]
 800431e:	e00d      	b.n	800433c <UART_SetConfig+0x348>
 8004320:	2302      	movs	r3, #2
 8004322:	77fb      	strb	r3, [r7, #31]
 8004324:	e00a      	b.n	800433c <UART_SetConfig+0x348>
 8004326:	2304      	movs	r3, #4
 8004328:	77fb      	strb	r3, [r7, #31]
 800432a:	e007      	b.n	800433c <UART_SetConfig+0x348>
 800432c:	2308      	movs	r3, #8
 800432e:	77fb      	strb	r3, [r7, #31]
 8004330:	e004      	b.n	800433c <UART_SetConfig+0x348>
 8004332:	2310      	movs	r3, #16
 8004334:	77fb      	strb	r3, [r7, #31]
 8004336:	e001      	b.n	800433c <UART_SetConfig+0x348>
 8004338:	2310      	movs	r3, #16
 800433a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004344:	d15b      	bne.n	80043fe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004346:	7ffb      	ldrb	r3, [r7, #31]
 8004348:	2b08      	cmp	r3, #8
 800434a:	d828      	bhi.n	800439e <UART_SetConfig+0x3aa>
 800434c:	a201      	add	r2, pc, #4	@ (adr r2, 8004354 <UART_SetConfig+0x360>)
 800434e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004352:	bf00      	nop
 8004354:	08004379 	.word	0x08004379
 8004358:	08004381 	.word	0x08004381
 800435c:	08004389 	.word	0x08004389
 8004360:	0800439f 	.word	0x0800439f
 8004364:	0800438f 	.word	0x0800438f
 8004368:	0800439f 	.word	0x0800439f
 800436c:	0800439f 	.word	0x0800439f
 8004370:	0800439f 	.word	0x0800439f
 8004374:	08004397 	.word	0x08004397
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004378:	f7fe ffac 	bl	80032d4 <HAL_RCC_GetPCLK1Freq>
 800437c:	61b8      	str	r0, [r7, #24]
        break;
 800437e:	e013      	b.n	80043a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004380:	f7fe ffbc 	bl	80032fc <HAL_RCC_GetPCLK2Freq>
 8004384:	61b8      	str	r0, [r7, #24]
        break;
 8004386:	e00f      	b.n	80043a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004388:	4b4b      	ldr	r3, [pc, #300]	@ (80044b8 <UART_SetConfig+0x4c4>)
 800438a:	61bb      	str	r3, [r7, #24]
        break;
 800438c:	e00c      	b.n	80043a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800438e:	f7fe fe8f 	bl	80030b0 <HAL_RCC_GetSysClockFreq>
 8004392:	61b8      	str	r0, [r7, #24]
        break;
 8004394:	e008      	b.n	80043a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004396:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800439a:	61bb      	str	r3, [r7, #24]
        break;
 800439c:	e004      	b.n	80043a8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	77bb      	strb	r3, [r7, #30]
        break;
 80043a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d074      	beq.n	8004498 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	005a      	lsls	r2, r3, #1
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	085b      	lsrs	r3, r3, #1
 80043b8:	441a      	add	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	2b0f      	cmp	r3, #15
 80043c8:	d916      	bls.n	80043f8 <UART_SetConfig+0x404>
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043d0:	d212      	bcs.n	80043f8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	f023 030f 	bic.w	r3, r3, #15
 80043da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	085b      	lsrs	r3, r3, #1
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	89fb      	ldrh	r3, [r7, #14]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	89fa      	ldrh	r2, [r7, #14]
 80043f4:	60da      	str	r2, [r3, #12]
 80043f6:	e04f      	b.n	8004498 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	77bb      	strb	r3, [r7, #30]
 80043fc:	e04c      	b.n	8004498 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043fe:	7ffb      	ldrb	r3, [r7, #31]
 8004400:	2b08      	cmp	r3, #8
 8004402:	d828      	bhi.n	8004456 <UART_SetConfig+0x462>
 8004404:	a201      	add	r2, pc, #4	@ (adr r2, 800440c <UART_SetConfig+0x418>)
 8004406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440a:	bf00      	nop
 800440c:	08004431 	.word	0x08004431
 8004410:	08004439 	.word	0x08004439
 8004414:	08004441 	.word	0x08004441
 8004418:	08004457 	.word	0x08004457
 800441c:	08004447 	.word	0x08004447
 8004420:	08004457 	.word	0x08004457
 8004424:	08004457 	.word	0x08004457
 8004428:	08004457 	.word	0x08004457
 800442c:	0800444f 	.word	0x0800444f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004430:	f7fe ff50 	bl	80032d4 <HAL_RCC_GetPCLK1Freq>
 8004434:	61b8      	str	r0, [r7, #24]
        break;
 8004436:	e013      	b.n	8004460 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004438:	f7fe ff60 	bl	80032fc <HAL_RCC_GetPCLK2Freq>
 800443c:	61b8      	str	r0, [r7, #24]
        break;
 800443e:	e00f      	b.n	8004460 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004440:	4b1d      	ldr	r3, [pc, #116]	@ (80044b8 <UART_SetConfig+0x4c4>)
 8004442:	61bb      	str	r3, [r7, #24]
        break;
 8004444:	e00c      	b.n	8004460 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004446:	f7fe fe33 	bl	80030b0 <HAL_RCC_GetSysClockFreq>
 800444a:	61b8      	str	r0, [r7, #24]
        break;
 800444c:	e008      	b.n	8004460 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800444e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004452:	61bb      	str	r3, [r7, #24]
        break;
 8004454:	e004      	b.n	8004460 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	77bb      	strb	r3, [r7, #30]
        break;
 800445e:	bf00      	nop
    }

    if (pclk != 0U)
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d018      	beq.n	8004498 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	085a      	lsrs	r2, r3, #1
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	441a      	add	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	fbb2 f3f3 	udiv	r3, r2, r3
 8004478:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b0f      	cmp	r3, #15
 800447e:	d909      	bls.n	8004494 <UART_SetConfig+0x4a0>
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004486:	d205      	bcs.n	8004494 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	b29a      	uxth	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60da      	str	r2, [r3, #12]
 8004492:	e001      	b.n	8004498 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80044a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3720      	adds	r7, #32
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40007c00 	.word	0x40007c00
 80044b4:	40023800 	.word	0x40023800
 80044b8:	00f42400 	.word	0x00f42400

080044bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00a      	beq.n	800452a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004550:	f003 0310 	and.w	r3, r3, #16
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004598:	2b00      	cmp	r3, #0
 800459a:	d01a      	beq.n	80045d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045ba:	d10a      	bne.n	80045d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	605a      	str	r2, [r3, #4]
  }
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08c      	sub	sp, #48	@ 0x30
 8004604:	af02      	add	r7, sp, #8
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004610:	f7fc fde4 	bl	80011dc <HAL_GetTick>
 8004614:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b08      	cmp	r3, #8
 8004622:	d12e      	bne.n	8004682 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004624:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462c:	2200      	movs	r2, #0
 800462e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f83b 	bl	80046ae <UART_WaitOnFlagUntilTimeout>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d021      	beq.n	8004682 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	e853 3f00 	ldrex	r3, [r3]
 800464a:	60fb      	str	r3, [r7, #12]
   return(result);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004652:	623b      	str	r3, [r7, #32]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	461a      	mov	r2, r3
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004660:	69b9      	ldr	r1, [r7, #24]
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	e841 2300 	strex	r3, r2, [r1]
 8004668:	617b      	str	r3, [r7, #20]
   return(result);
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1e6      	bne.n	800463e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e011      	b.n	80046a6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3728      	adds	r7, #40	@ 0x28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	603b      	str	r3, [r7, #0]
 80046ba:	4613      	mov	r3, r2
 80046bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046be:	e04f      	b.n	8004760 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c6:	d04b      	beq.n	8004760 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c8:	f7fc fd88 	bl	80011dc <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d302      	bcc.n	80046de <UART_WaitOnFlagUntilTimeout+0x30>
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e04e      	b.n	8004780 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d037      	beq.n	8004760 <UART_WaitOnFlagUntilTimeout+0xb2>
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2b80      	cmp	r3, #128	@ 0x80
 80046f4:	d034      	beq.n	8004760 <UART_WaitOnFlagUntilTimeout+0xb2>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b40      	cmp	r3, #64	@ 0x40
 80046fa:	d031      	beq.n	8004760 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b08      	cmp	r3, #8
 8004708:	d110      	bne.n	800472c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2208      	movs	r2, #8
 8004710:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f838 	bl	8004788 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2208      	movs	r2, #8
 800471c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e029      	b.n	8004780 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004736:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800473a:	d111      	bne.n	8004760 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004744:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f81e 	bl	8004788 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2220      	movs	r2, #32
 8004750:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e00f      	b.n	8004780 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	69da      	ldr	r2, [r3, #28]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	4013      	ands	r3, r2
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	429a      	cmp	r2, r3
 800476e:	bf0c      	ite	eq
 8004770:	2301      	moveq	r3, #1
 8004772:	2300      	movne	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	461a      	mov	r2, r3
 8004778:	79fb      	ldrb	r3, [r7, #7]
 800477a:	429a      	cmp	r2, r3
 800477c:	d0a0      	beq.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004788:	b480      	push	{r7}
 800478a:	b095      	sub	sp, #84	@ 0x54
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004798:	e853 3f00 	ldrex	r3, [r3]
 800479c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800479e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80047b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047b6:	e841 2300 	strex	r3, r2, [r1]
 80047ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1e6      	bne.n	8004790 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3308      	adds	r3, #8
 80047c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	e853 3f00 	ldrex	r3, [r3]
 80047d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	f023 0301 	bic.w	r3, r3, #1
 80047d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3308      	adds	r3, #8
 80047e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047ea:	e841 2300 	strex	r3, r2, [r1]
 80047ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1e5      	bne.n	80047c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d118      	bne.n	8004830 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	e853 3f00 	ldrex	r3, [r3]
 800480a:	60bb      	str	r3, [r7, #8]
   return(result);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f023 0310 	bic.w	r3, r3, #16
 8004812:	647b      	str	r3, [r7, #68]	@ 0x44
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	461a      	mov	r2, r3
 800481a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800481c:	61bb      	str	r3, [r7, #24]
 800481e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004820:	6979      	ldr	r1, [r7, #20]
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	e841 2300 	strex	r3, r2, [r1]
 8004828:	613b      	str	r3, [r7, #16]
   return(result);
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1e6      	bne.n	80047fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2220      	movs	r2, #32
 8004834:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004844:	bf00      	nop
 8004846:	3754      	adds	r7, #84	@ 0x54
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004850:	b084      	sub	sp, #16
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	f107 001c 	add.w	r0, r7, #28
 800485e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004862:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004866:	2b01      	cmp	r3, #1
 8004868:	d121      	bne.n	80048ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	4b21      	ldr	r3, [pc, #132]	@ (8004900 <USB_CoreInit+0xb0>)
 800487c:	4013      	ands	r3, r2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800488e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004892:	2b01      	cmp	r3, #1
 8004894:	d105      	bne.n	80048a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fa92 	bl	8004dcc <USB_CoreReset>
 80048a8:	4603      	mov	r3, r0
 80048aa:	73fb      	strb	r3, [r7, #15]
 80048ac:	e010      	b.n	80048d0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fa86 	bl	8004dcc <USB_CoreReset>
 80048c0:	4603      	mov	r3, r0
 80048c2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80048d0:	7fbb      	ldrb	r3, [r7, #30]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d10b      	bne.n	80048ee <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f043 0206 	orr.w	r2, r3, #6
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f043 0220 	orr.w	r2, r3, #32
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048fa:	b004      	add	sp, #16
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	ffbdffbf 	.word	0xffbdffbf

08004904 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f023 0201 	bic.w	r2, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	460b      	mov	r3, r1
 8004930:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004942:	78fb      	ldrb	r3, [r7, #3]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d115      	bne.n	8004974 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004954:	200a      	movs	r0, #10
 8004956:	f7fc fc4d 	bl	80011f4 <HAL_Delay>
      ms += 10U;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	330a      	adds	r3, #10
 800495e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fa25 	bl	8004db0 <USB_GetMode>
 8004966:	4603      	mov	r3, r0
 8004968:	2b01      	cmp	r3, #1
 800496a:	d01e      	beq.n	80049aa <USB_SetCurrentMode+0x84>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004970:	d9f0      	bls.n	8004954 <USB_SetCurrentMode+0x2e>
 8004972:	e01a      	b.n	80049aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d115      	bne.n	80049a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004986:	200a      	movs	r0, #10
 8004988:	f7fc fc34 	bl	80011f4 <HAL_Delay>
      ms += 10U;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	330a      	adds	r3, #10
 8004990:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fa0c 	bl	8004db0 <USB_GetMode>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d005      	beq.n	80049aa <USB_SetCurrentMode+0x84>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80049a2:	d9f0      	bls.n	8004986 <USB_SetCurrentMode+0x60>
 80049a4:	e001      	b.n	80049aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e005      	b.n	80049b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2bc8      	cmp	r3, #200	@ 0xc8
 80049ae:	d101      	bne.n	80049b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e000      	b.n	80049b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049c0:	b084      	sub	sp, #16
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b086      	sub	sp, #24
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80049ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049da:	2300      	movs	r3, #0
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	e009      	b.n	80049f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	3340      	adds	r3, #64	@ 0x40
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	2200      	movs	r2, #0
 80049ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	3301      	adds	r3, #1
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	2b0e      	cmp	r3, #14
 80049f8:	d9f2      	bls.n	80049e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d11c      	bne.n	8004a3c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a10:	f043 0302 	orr.w	r3, r3, #2
 8004a14:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	e005      	b.n	8004a48 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a40:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a4e:	461a      	mov	r2, r3
 8004a50:	2300      	movs	r3, #0
 8004a52:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a54:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d10d      	bne.n	8004a78 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d104      	bne.n	8004a6e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a64:	2100      	movs	r1, #0
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f968 	bl	8004d3c <USB_SetDevSpeed>
 8004a6c:	e008      	b.n	8004a80 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a6e:	2101      	movs	r1, #1
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f963 	bl	8004d3c <USB_SetDevSpeed>
 8004a76:	e003      	b.n	8004a80 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a78:	2103      	movs	r1, #3
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f95e 	bl	8004d3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a80:	2110      	movs	r1, #16
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f8fa 	bl	8004c7c <USB_FlushTxFifo>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f924 	bl	8004ce0 <USB_FlushRxFifo>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	2300      	movs	r3, #0
 8004aac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	e043      	b.n	8004b54 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ade:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ae2:	d118      	bne.n	8004b16 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004af6:	461a      	mov	r2, r3
 8004af8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	e013      	b.n	8004b28 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	e008      	b.n	8004b28 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b22:	461a      	mov	r2, r3
 8004b24:	2300      	movs	r3, #0
 8004b26:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b34:	461a      	mov	r2, r3
 8004b36:	2300      	movs	r3, #0
 8004b38:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b46:	461a      	mov	r2, r3
 8004b48:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	3301      	adds	r3, #1
 8004b52:	613b      	str	r3, [r7, #16]
 8004b54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004b58:	461a      	mov	r2, r3
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d3b5      	bcc.n	8004acc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b60:	2300      	movs	r3, #0
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	e043      	b.n	8004bee <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b7c:	d118      	bne.n	8004bb0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10a      	bne.n	8004b9a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b90:	461a      	mov	r2, r3
 8004b92:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	e013      	b.n	8004bc2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	e008      	b.n	8004bc2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bce:	461a      	mov	r2, r3
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be0:	461a      	mov	r2, r3
 8004be2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004be6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	3301      	adds	r3, #1
 8004bec:	613b      	str	r3, [r7, #16]
 8004bee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d3b5      	bcc.n	8004b66 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c0c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004c1a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d105      	bne.n	8004c30 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	f043 0210 	orr.w	r2, r3, #16
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699a      	ldr	r2, [r3, #24]
 8004c34:	4b0f      	ldr	r3, [pc, #60]	@ (8004c74 <USB_DevInit+0x2b4>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c3c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	f043 0208 	orr.w	r2, r3, #8
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c50:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d105      	bne.n	8004c64 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699a      	ldr	r2, [r3, #24]
 8004c5c:	4b06      	ldr	r3, [pc, #24]	@ (8004c78 <USB_DevInit+0x2b8>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c70:	b004      	add	sp, #16
 8004c72:	4770      	bx	lr
 8004c74:	803c3800 	.word	0x803c3800
 8004c78:	40000004 	.word	0x40000004

08004c7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c96:	d901      	bls.n	8004c9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e01b      	b.n	8004cd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	daf2      	bge.n	8004c8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	019b      	lsls	r3, r3, #6
 8004cac:	f043 0220 	orr.w	r2, r3, #32
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cc0:	d901      	bls.n	8004cc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e006      	b.n	8004cd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b20      	cmp	r3, #32
 8004cd0:	d0f0      	beq.n	8004cb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cf8:	d901      	bls.n	8004cfe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e018      	b.n	8004d30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	daf2      	bge.n	8004cec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2210      	movs	r2, #16
 8004d0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	3301      	adds	r3, #1
 8004d14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d1c:	d901      	bls.n	8004d22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e006      	b.n	8004d30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 0310 	and.w	r3, r3, #16
 8004d2a:	2b10      	cmp	r3, #16
 8004d2c:	d0f0      	beq.n	8004d10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	68f9      	ldr	r1, [r7, #12]
 8004d58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b085      	sub	sp, #20
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004d88:	f023 0303 	bic.w	r3, r3, #3
 8004d8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d9c:	f043 0302 	orr.w	r3, r3, #2
 8004da0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004de4:	d901      	bls.n	8004dea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e01b      	b.n	8004e22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	daf2      	bge.n	8004dd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f043 0201 	orr.w	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3301      	adds	r3, #1
 8004e06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e0e:	d901      	bls.n	8004e14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e006      	b.n	8004e22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d0f0      	beq.n	8004e02 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <memset>:
 8004e2e:	4402      	add	r2, r0
 8004e30:	4603      	mov	r3, r0
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d100      	bne.n	8004e38 <memset+0xa>
 8004e36:	4770      	bx	lr
 8004e38:	f803 1b01 	strb.w	r1, [r3], #1
 8004e3c:	e7f9      	b.n	8004e32 <memset+0x4>
	...

08004e40 <__libc_init_array>:
 8004e40:	b570      	push	{r4, r5, r6, lr}
 8004e42:	4d0d      	ldr	r5, [pc, #52]	@ (8004e78 <__libc_init_array+0x38>)
 8004e44:	4c0d      	ldr	r4, [pc, #52]	@ (8004e7c <__libc_init_array+0x3c>)
 8004e46:	1b64      	subs	r4, r4, r5
 8004e48:	10a4      	asrs	r4, r4, #2
 8004e4a:	2600      	movs	r6, #0
 8004e4c:	42a6      	cmp	r6, r4
 8004e4e:	d109      	bne.n	8004e64 <__libc_init_array+0x24>
 8004e50:	4d0b      	ldr	r5, [pc, #44]	@ (8004e80 <__libc_init_array+0x40>)
 8004e52:	4c0c      	ldr	r4, [pc, #48]	@ (8004e84 <__libc_init_array+0x44>)
 8004e54:	f000 f818 	bl	8004e88 <_init>
 8004e58:	1b64      	subs	r4, r4, r5
 8004e5a:	10a4      	asrs	r4, r4, #2
 8004e5c:	2600      	movs	r6, #0
 8004e5e:	42a6      	cmp	r6, r4
 8004e60:	d105      	bne.n	8004e6e <__libc_init_array+0x2e>
 8004e62:	bd70      	pop	{r4, r5, r6, pc}
 8004e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e68:	4798      	blx	r3
 8004e6a:	3601      	adds	r6, #1
 8004e6c:	e7ee      	b.n	8004e4c <__libc_init_array+0xc>
 8004e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e72:	4798      	blx	r3
 8004e74:	3601      	adds	r6, #1
 8004e76:	e7f2      	b.n	8004e5e <__libc_init_array+0x1e>
 8004e78:	08004ed0 	.word	0x08004ed0
 8004e7c:	08004ed0 	.word	0x08004ed0
 8004e80:	08004ed0 	.word	0x08004ed0
 8004e84:	08004ed4 	.word	0x08004ed4

08004e88 <_init>:
 8004e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8a:	bf00      	nop
 8004e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8e:	bc08      	pop	{r3}
 8004e90:	469e      	mov	lr, r3
 8004e92:	4770      	bx	lr

08004e94 <_fini>:
 8004e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e96:	bf00      	nop
 8004e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9a:	bc08      	pop	{r3}
 8004e9c:	469e      	mov	lr, r3
 8004e9e:	4770      	bx	lr
